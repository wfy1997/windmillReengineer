{"version":3,"sources":["bento_model_file.yaml","bento_model_properties.yaml","mdf-schema.yaml","serviceWorker.js","DataDictionary/action.js","DataDictionary/utils.js","DataDictionary/NodeCategories/icons/icon_administrative.svg","DataDictionary/NodeCategories/icons/icon_analysis.svg","DataDictionary/NodeCategories/icons/icon_biospecimen.svg","DataDictionary/NodeCategories/icons/icon_clinical.svg","DataDictionary/NodeCategories/icons/icon_clinical_assessment.svg","DataDictionary/NodeCategories/icons/icon_data_file.svg","DataDictionary/NodeCategories/icons/icon_metadata.svg","DataDictionary/NodeCategories/icons/icon_notation.svg","DataDictionary/NodeCategories/icons/icon_index_file.svg","DataDictionary/NodeCategories/icons/icon_data_observations.svg","DataDictionary/NodeCategories/icons/icon_default.svg","DataDictionary/NodeCategories/icons/icon_experimental_methods.svg","DataDictionary/NodeCategories/icons/icon_subject_characteristics.svg","DataDictionary/NodeCategories/icons/icon_imaging.svg","DataDictionary/NodeCategories/icons/icon_study_administration.svg","DataDictionary/NodeCategories/helper.js","utils.js","DataDictionary/highlightHelper.jsx","DataDictionary/table/DataDictionaryPropertyTable/index.jsx","DataDictionary/table/DataDictionaryNode/index.jsx","DataDictionary/table/DataDictionaryCategory/index.jsx","DataDictionary/table/DataDictionaryTable/DataDictionaryTable.jsx","DataDictionary/table/DataDictionaryTable/index.js","DataDictionary/DataModelStructure/DataModelStructure.jsx","DataDictionary/DataModelStructure/index.js","GraphUtils/utils.js","DataDictionary/graph/GraphCalculator/graphStructureHelper.js","DataDictionary/graph/GraphCalculator/graphCalculatorHelper.js","DataDictionary/graph/GraphCalculator/GraphCalculator.jsx","DataDictionary/graph/GraphCalculator/index.js","DataDictionary/graph/Legend/Legend.jsx","DataDictionary/graph/Legend/index.js","DataDictionary/graph/Canvas/Canvas.jsx","DataDictionary/graph/Canvas/index.js","DataDictionary/graph/GraphNode/GraphNode.jsx","DataDictionary/graph/GraphEdge/GraphEdge.jsx","DataDictionary/graph/GraphDrawer/GraphDrawer.jsx","DataDictionary/graph/GraphDrawer/index.js","DataDictionary/graph/NodeTooltip/NodeTooltip.jsx","DataDictionary/graph/NodeTooltip/index.js","DataDictionary/graph/NodePopup/NodePopup.jsx","DataDictionary/graph/NodePopup/index.js","DataDictionary/graph/OverlayPropertyTable/OverlayPropertyTable.jsx","DataDictionary/graph/OverlayPropertyTable/index.js","DataDictionary/graph/ActionLayer/ActionLayer.jsx","DataDictionary/graph/ActionLayer/index.js","DataDictionary/graph/DataDictionaryGraph/index.jsx","DataDictionary/search/DictionarySearcher/searchHelper.js","DataDictionary/search/DictionarySearcher/DictionarySearcher.jsx","DataDictionary/search/DictionarySearcher/index.js","DataDictionary/search/DictionarySearchHistory/DictionarySearchHistory.jsx","DataDictionary/search/DictionarySearchHistory/index.js","DataDictionary/DataDictionary.jsx","DataDictionary/index.jsx","DataDictionary/reducers.js","reducers.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","hoverNode","nodeID","type","setOverlayPropertyTableHidden","isHidden","setGraphView","isGraphView","setNeedReset","needReset","setHighlightingMatchedNodeOpened","opened","concatTwoWords","w1","w2","length","getType","property","enum","oneOf","map","item","reduce","flatList","it","Array","isArray","concat","push","anyOf","downloadTemplate","format","nodeId","templatePath","open","graphStyleConfig","parseDictionaryNodes","dictionary","Object","keys","filter","id","charAt","node","category","getPropertyDescription","description","term","getSearchHistoryItems","JSON","parse","localStorage","getItem","addSearchHistoryItems","searchHistoryItem","keywordStr","prevHistory","newHistory","slice","find","index","findIndex","splice","unshift","setItem","stringify","clearSearchHistoryItems","MatchedIndicesShape","PropTypes","arrayOf","number","MatchedItemShape","shape","indices","arrayIndex","key","string","value","SearchItemPropertyShape","name","oneOfType","SearchItemShape","title","properties","matches","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","styles","props","createElement","width","height","xmlns","fillRule","fill","d","nodeCategoryList","clinical","icon","IconClinical","color","biospecimen","data_file","metadata_file","transform","rx","y","analysis","administrative","notation","stroke","strokeLinecap","index_file","cx","cy","r","clinical_assessment","xmlnsXlink","xlinkHref","medical_history","data_observations","experimental_methods","subject_characteristics","imaging","study_administration","defaultCategory","getCategoryIconSVG","getCategoryColor","capitalizeFirstLetter","str","replace","txt","toUpperCase","substr","toLowerCase","intersection","aList","bList","key2Count","db","res","entries","kv","escapeReturnChar","newlineClassName","pieces","split","piece","className","addHighlightingSpans","spanClassName","cursor","currentIndices","resultFragments","highlightSpanClassName","substring","getNodeTitleFragment","allMatches","matchedItem","getNodeDescriptionFragment","getMatchesSummaryForProperties","allProperties","console","log","matchedPropertiesSummary","forEach","propertyKey","propertyIndex","nameMatch","descriptionMatch","typeMatchList","descriptionStr","a","getMatchInsideProperty","summaryItem","DataDictionaryPropertyTable","borderModifier","hasBorder","propertyKeysList","hideIsRequired","sort","k1","k2","required1","requiredProperties","includes","required2","onlyShowMatchedProperties","needHighlightSearchResult","matchedResult","matchedSummaryItem","termID","src","termDef","term_url","err","propertyNameFragment","propertyDescriptionFragment","getPropertyDescriptionFragment","isRequired","React","Component","defaultProps","DataDictionaryNode","handleCloseNode","onExpandNode","handleDownloadTemplate","e","stopPropagation","expanded","Fragment","style","borderLeftColor","onClick","handleClickNode","onKeyPress","role","tabIndex","label","rightIcon","buttonType","required","DataDictionaryCategory","IconSVG","nodes","highlightingNodeID","DataDictionaryTable","dictionaryName","c2nl","lookup","category2NodeList","acc","nodesCount","propertiesCount","getNodePropertyCount","ReduxDataDictionaryTable","connect","state","submission","ddgraph","tableExpandNodeID","dispatch","setExpandNode","DataModelStructure","handleClickGraphButton","onSetGraphView","onResetGraphCanvas","handleClickOverlayPropertyButton","onSetOverlayPropertyTableHidden","overlayPropertyHidden","downloadTemplatesEnabled","relatedNodeIDs","excludedNodesForTemplates","handleDownloadAllTemplates","nodesToDownload","nid","allRoutes","nodeIDsInRoute","downloadMultiTemplate","clickingNodeName","dictionaryVersion","dataModelStructure","entry","nodeIDsBefore","linksBefore","lastNodeModifier","Button","Menu","Item","zip","JSZip","Promise","all","fileUrl","saveAsFileName","fetch","then","response","ok","text","Error","responseText","file","catch","time","Date","readmeContent","toLocaleDateString","toLocaleTimeString","routeIndex","join","generateAsync","content","FileSaver","saveAs","ReduxDataModelStructure","dataModelStructureRelatedNodeIDs","dataModelStructureAllRoutesBetween","highlightingNode","versionInfo","hidden","getSubgroupLinks","link","nameToNode","sourceId","subgroupLinks","subgroup","sgLink","target_type","exists","getTreeHierarchy","root","name2EdgesIn","getTreeHierarchyHelper","hierarchy","descendants","Set","add","set","edge","sourceName","get","n","Map","assignNodePositions","edges","opts","breadthFirstInfo","result","bfOrder","treeLevel2Names","name2Level","targetName","error","emptyDb","couldBeRoot","rootNode","findRoot","processedNodes","queue","query","level","name2ActualLvl","head","has","nodesBreadthFirst","name2Node","row2Names","numPerRow","lastRow","numLevels","nodesAtLevel","numNodesAtLevel","nodeName","posAtLevel","position","positionIndex","getAllChildrenNodeIDs","startingNodeID","wholeGraphNodes","currentLevelNodeIDs","outLinks","nextLevelNodeIDs","outNodeId","getAllChildrenLinks","startingNode","relatedLinks","outID","sourceNodeHistory","nextLevel","j","outNodeID","inOrOutLinksFromGivenNode","inOrOut","subgraphNodeIDs","subgraphEdges","links","inLinks","neighborNodeID","inLinksFilterFunc","outLinksFilterFunc","getNodeIDsThatHaveNoInOrOutLinks","resultIDs","getArticulationNodesInSubgraph","articulationNodeIDs","targetNodeID","nodeIdsWithoutInLinks","nodeIDsInSubgraphWithoutTargetNode","inNeighbors","inNodeID","outNeighbors","isArticulationNodeInSubgraph","BFSTraverseSubgraph","alongLinkDirection","resultNodeIDs","linkNeighbors","getNodesAndLinksSummaryBetweenNodesInSubgraph","endingNodeID","betweenNodeIDs","firstLevelOutNodeIDs","betweenLinks","outNOdeIDsInSubgraph","nodeIDs","getAllRoutesBetweenTwoNodes","resultRoutes","takeOneStep","curID","curPath","resultPath","from","reverse","oid","delete","calculateGraphLayout","countsSearch","linksSearch","createAll","nodesToHide","startsWith","count","counts_search","hideDb","list","newLinks","sgLinks","links_search","undefined","createNodesAndEdges","dotString","graphString","IDsInThisLevel","buildGraphVizDOTString","createDotStrinByNodesEdges","Viz","Module","render","renderJSONObject","renderedJSON","renderedNodes","objects","rank","boundingBox","_draw_","points","cur","x1","y1","x2","y2","Infinity","iconRadius","topCenterX","topCenterY","originNode","nodeType","nodeColor","textPadding","fontSize","textLineGap","nodeNames","maxCharInRow","breakwordMinLength","wordsList","currentLine","breakPos","nextBreakPos","truncateLines","rectMinHeight","rectHeight","Math","max","requiredPropertiesCount","optionalPropertiesCount","nodeLevel","names","_gvid","renderedEdges","controlPoints","pathString","pair","sourceNode","tail","targetNode","sourePosition","targetPosition","graphBoundingBox","op","calculateHighlightRelatedNodeIDs","calculatePathRelatedToSecondHighlightingNode","secondHighlightingNodeID","pathRelatedToSecondHighlightingNode","calculateDataModelStructure","unsortedCriticalNodeIDs","sortedCriticalNodeIDs","nodeIDsToSort","sortNodesByTopology","resultCriticalNodeIDs","singleDescendentNodeID","getSingleEndDescendentNodeID","resultStructure","routesBetweenStartEndNodes","lastCriticalNodeID","nodeIDsBeforeNode","linksBeforeNode","GraphCalculator","oldHighlightingNode","oldSecondHighlightingNodeID","layoutInitialized","layoutResult","onGraphLayoutCalculated","legendItems","types","_","uniq","getAllTypes","onGraphLegendCalculated","nextProps","newHighlightingNode","newSecondHighlightingNodeID","relatedHighlightedNodeIDs","onHighlightRelatedNodesCalculated","secondHighlightingNodeCandidateIDs","onSecondHighlightingNodeCandidateIDsCalculated","onPathRelatedToSecondHighlightingNodeCalculated","getDataModelStructureForSecondHighlightingNodes","onDataModelStructureCalculated","ReduxGraphCalculator","layout","setGraphLayout","setGraphLegend","setRelatedNodeIDs","setSecondHighlightingNodeCandidateIDs","setPathRelatedToSecondHighlightingNode","setDataModelStructure","Legend","toggleLegend","setState","show","items","itemColor","IconSvg","backgroundColor","ReduxLegend","d3","select","zoom","zoomTransform","zoomIdentity","transition","easeLinear","event","Canvas","handleResize","updateCanvasSize","handleCanvasUpdate","canvasBoundingRect","canvasElement","current","getBoundingClientRect","onCanvasBoundingBoxUpdate","handleClick","onClickBlankSpace","zoomAction","k","zoomCatcher","translateSign","zoomBehavior","translate","canvasWidth","abs","canvasHeight","scale","handleZoomIn","handleZoomOut","handleReset","createRef","svgElement","containerElement","duration","ease","scaleExtent","minZoom","maxZoom","translateExtent","topLeftTranslateLimit","bottomRightTranslateLimit","on","zoomTarget","attr","addEventListener","onResetCanvasFinished","removeEventListener","clientWidth","clientHeight","ref","markerWidth","markerHeight","refX","refY","orient","markerUnits","Children","children","child","cloneElement","ReduxCanvas","setCanvasBoundingRect","GraphNode","nodeFadedClassModifier","isFaded","nodeHalfFadedClassModifier","isHalfFaded","nodeDashedClassModifier","isDashed","nodeClickableClassModifier","isClickable","nodeIsCurrentHighlightingClassModifier","isHighlightingNode","onMouseOver","onMouseOut","x","ry","matchedNodeNameIndices","rowEndIndex","nodeTitleFragment","currentRowIndex","rowStartIndex","nodeNameRows","currentHighlightIndex","textAttrBase","textAnchor","alignmentBaseline","tspanAttrBase","tspanAttr","tspanHighlightAttr","currentRowStr","textY","textAttr","cursorInRow","currentRowFragment","highlightStartIndex","highlightEndIndex","highlightStartIndexInRow","highlightEndIndexInRow","lenght","getNodeTitleSVGFragment","GraphEdge","edgeRequiredClassModifier","edgeFadedClassModifier","edgeHalfFadedClassModifier","edgeHighlightedClassModifier","isHighlighted","marker-end","GraphDrawer","onMouseOverNode","onHoverNode","onMouseOutNode","onCancelHoverNode","onClickNode","getNodeRef","graphNodeRefs","graphDomRef","nodeSVGElementInitialized","graphNodesSVGElements","getSVGElement","onGraphNodesSVGElementsUpdated","boundingBoxLength","fittingScale","min","fittingTransX","fittingTransY","isNaN","isNodeFaded","isNodeClickable","isNodeHalfFaded","isNodeDashed","isSearchMode","matchedNodeIDs","matchedNodeIDsInNameAndDescription","searchResult","matchItem","isEdgeFaded","isEdgeHalfFaded","isEdgeHighlighted","isEdgeRelatedToHighlightedNode","isEdgeAlongPathRelatedToSecondHighlightNode","ReduxGraphDrawer","clickNode","setGraphNodesSVGElements","NodeTooltip","hoveringNode","hoveringNodeSVGElement","svgBoundingBox","top","left","tooltipLeft","tooltipBottom","innerHeight","bottom","ReduxNodeTooltip","NodePopup","handleClickPropertyButton","onOpenOverlayPropertyTable","highlightingNodeSVGElement","popupLeft","popupTop","onClosePopup","ReduxNodePopup","OverlayPropertyTable","getTitle","getDescription","handleClose","onCloseOverlayPropertyTable","handleOpenAllProperties","onOpenMatchedProperties","handleDisplayOnlyMatchedProperties","onCloseMatchedProperties","searchedNodeNotOpened","isSearchResultNodeOpened","getNode","highlightingMatchedNodeID","getSearchResultItem","resItem","ReduxOverlayPropertyTable","highlightingMatchedNodeOpened","ActionLayer","handleClearSearch","onClearSearchResult","ReduxActionLayer","DataDictionaryGraph","searchKeyword","searchData","keyword","errorMsg","halfLength","round","options","includeMatches","threshold","shouldSort","includeScore","minMatchCharLength","Fuse","search","DictionarySearcher","onClearResult","resetSearchResult","autoCompleteRef","clearInput","launchClearSearchFromOutside","launchSearchFromOutside","setInputText","setIsSearching","onSearchResultUpdated","isSearchFinished","hasError","suggestionList","summary","matchedNodeIDsInProperties","generalMatchedNodeIDs","matchedPropertiesCount","matchedNodeNameAndDescriptionsCount","getSearchSummary","matchedNodes","onSearchHistoryItemCreated","matchedCount","onSaveCurrentSearchKeyword","onSearchResultCleared","inputChangeFunc","inputText","onStartSearching","matchedStrings","matchedPieceIndices","arr","str1","str2","compareTwoStrings","fullString","suggestionItemClickFunc","suggestionItem","submitInputFunc","currentSearchKeyword","inputPlaceHolderText","onSuggestionItemClick","onInputChange","onSubmitInput","ReduxDictionarySearcher","isSearching","searchResultSummary","addSearchHistoryItem","saveCurrentSearchKeyword","withRef","DictionarySearchHistory","onClickSearchHistoryItem","handleClearHistory","onClearSearchHistoryItems","searchHistoryItems","zeroCountModifier","ReduxDictionarySearchHistory","DataDictionary","handleClickSearchHistoryItem","dictionarySearcherRef","getWrappedInstance","handleClearSearchResult","ReduxDataDictionary","ddgraphInitialState","action","newHoveringNode","newTableExpandNodeID","getFileNodes","getNodeTypes","excludeSystemProperties","systemProperties","getDictionaryWithExcludeSystemProperties","reducers","combineReducers","file_type","formSchema","projects","data","p","code","project_id","projectAvail","availability_type","nodeTypes","file_nodes","oauth_url","url","login","prevCounts","submit_entity_counts","newCounts","entities","ent","submit_result","status","submit_status","submit_result_string","submit_counter","submit_total","total","search_form","search_result","search_status","unmappedFiles","unmappedFileCount","unmappedFileSize","totalSize","filesToMap","version","apiVersion","findObjectWithRef","obj","updateFn","root_key","propertyName","store","createStore","hash","axios","icdcModel","icdcM","icdcMData","yaml","safeLoad","icdcModelProps","icdcMP","icdcMPData","Nodes","dataList","Relationships","Category","pRequired","Props","nodeP","propertiesItem","PropDefinitions","Desc","Type","Src","Req","linkItem","Mul","Ends","backref","Dst","schema","jsonData","dict","refObj","rootKey","$RefParser","dereference","continueOnError","circular","newDataList","ReactDOM","StrictMode","document","getElementById","init","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.048e75c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bento_model_file.cabf754e.yaml\";","module.exports = __webpack_public_path__ + \"static/media/bento_model_properties.a890e764.yaml\";","module.exports = __webpack_public_path__ + \"static/media/mdf-schema.a43bb698.yaml\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const clickBlankSpace = () => ({\r\n  type: 'GRAPH_CLICK_BLANK_SPACE',\r\n});\r\n\r\nexport const setCanvasBoundingRect = canvasBoundingRect => ({\r\n  type: 'GRAPH_UPDATE_CANVAS_BOUNDING_RECT',\r\n  canvasBoundingRect,\r\n});\r\n\r\nexport const setSecondHighlightingNodeCandidateIDs = secondHighlightingNodeCandidateIDs => ({\r\n  type: 'GRAPH_UPDATE_SECOND_HIGHLIGHTING_NODE_CANDIDATES',\r\n  secondHighlightingNodeCandidateIDs,\r\n});\r\n\r\nexport const setPathRelatedToSecondHighlightingNode = pathRelatedToSecondHighlightingNode => ({\r\n  type: 'GRAPH_UPDATE_PATH_RELATED_TO_SECOND_HIGHLIGHTING_NODE',\r\n  pathRelatedToSecondHighlightingNode,\r\n});\r\n\r\nexport const setDataModelStructure = (\r\n  dataModelStructure,\r\n  dataModelStructureRelatedNodeIDs,\r\n  routesBetweenStartEndNodes,\r\n) => ({\r\n  type: 'GRAPH_UPDATE_DATA_MODEL_STRUCTURE',\r\n  dataModelStructure,\r\n  dataModelStructureRelatedNodeIDs,\r\n  routesBetweenStartEndNodes,\r\n});\r\n\r\nexport const setRelatedNodeIDs = relatedNodeIDs => ({\r\n  type: 'GRAPH_UPDATE_RELATED_HIGHLIGHTING_NODE',\r\n  relatedNodeIDs,\r\n});\r\n\r\nexport const setGraphLayout = layout => ({\r\n  type: 'GRAPH_LAYOUT_CALCULATED',\r\n  nodes: layout.nodes,\r\n  edges: layout.edges,\r\n  graphBoundingBox: layout.graphBoundingBox,\r\n});\r\n\r\nexport const setGraphLegend = legendItems => ({\r\n  type: 'GRAPH_LEGEND_CALCULATED',\r\n  legendItems,\r\n});\r\n\r\nexport const hoverNode = nodeID => ({\r\n  type: 'GRAPH_UPDATE_HOVERING_NODE',\r\n  nodeID,\r\n});\r\n\r\nexport const clickNode = nodeID => ({\r\n  type: 'GRAPH_CLICK_NODE',\r\n  nodeID,\r\n});\r\n\r\nexport const resetGraphHighlight = () => ({\r\n  type: 'GRAPH_RESET_HIGHLIGHT',\r\n});\r\n\r\nexport const setOverlayPropertyTableHidden = isHidden => ({\r\n  type: 'GRAPH_SET_OVERLAY_PROPERTY_TABLE_HIDDEN',\r\n  isHidden,\r\n});\r\n\r\nexport const setExpandNode = nodeID => ({\r\n  type: 'TABLE_EXPAND_NODE',\r\n  nodeID,\r\n});\r\n\r\nexport const setGraphView = isGraphView => ({\r\n  type: 'TOGGLE_GRAPH_TABLE_VIEW',\r\n  isGraphView,\r\n});\r\n\r\nexport const setNeedReset = needReset => ({\r\n  type: 'GRAPH_CANVAS_RESET_REQUIRED',\r\n  needReset,\r\n});\r\n\r\nexport const setIsSearching = isSearching => ({\r\n  type: 'SEARCH_SET_IS_SEARCHING_STATUS',\r\n  isSearching,\r\n});\r\n\r\nexport const setSearchResult = (searchResult, searchResultSummary) => ({\r\n  type: 'SEARCH_RESULT_UPDATED',\r\n  searchResult,\r\n  searchResultSummary,\r\n});\r\n\r\nexport const clearSearchHistoryItems = () => ({\r\n  type: 'SEARCH_CLEAR_HISTORY',\r\n});\r\n\r\nexport const addSearchHistoryItem = searchHistoryItem => ({\r\n  type: 'SEARCH_HISTORY_ITEM_CREATED',\r\n  searchHistoryItem,\r\n});\r\n\r\nexport const setGraphNodesSVGElements = graphNodesSVGElements => ({\r\n  type: 'GRAPH_NODES_SVG_ELEMENTS_UPDATED',\r\n  graphNodesSVGElements,\r\n});\r\n\r\nexport const clearSearchResult = () => ({\r\n  type: 'SEARCH_RESULT_CLEARED',\r\n});\r\n\r\nexport const saveCurrentSearchKeyword = keyword => ({\r\n  type: 'SEARCH_SAVE_CURRENT_KEYWORD',\r\n  keyword,\r\n});\r\n\r\nexport const setHighlightingMatchedNodeOpened = opened => ({\r\n  type: 'GRAPH_MATCHED_NODE_OPENED',\r\n  opened,\r\n});\r\n","import FileSaver from 'file-saver';\r\nimport PropTypes from 'prop-types';\r\nimport JSZip from 'jszip';\r\n//import { dataDictionaryTemplatePath, appname } from '../localconf';\r\n\r\nconst dataDictionaryTemplatePath = \"FIXME\";\r\nconst appname = \"Data Dictionary Vizualizations\"\r\n\r\nconst concatTwoWords = (w1, w2) => {\r\n  if (w1.length === 0) return w2;\r\n  if (w2.length === 0) return w1;\r\n  return `${w1} ${w2}`;\r\n};\r\n\r\nexport const truncateLines = (str, maxCharInRow = 10, breakwordMinLength = 12) => {\r\n  const wordsList = str.split(' ');\r\n  const res = [];\r\n  let currentLine = '';\r\n  for (let i = 0; i < wordsList.length; i += 1) {\r\n    // if adding a new word will make the current line too long\r\n    if (concatTwoWords(currentLine, wordsList[i]).length > maxCharInRow) {\r\n      // if the new word itself is too long, break it\r\n      if (wordsList[i].length > breakwordMinLength) {\r\n        let breakPos = maxCharInRow - currentLine.length - 1;\r\n        if (currentLine.length > 0) breakPos -= 1; // 1 more for space\r\n        res.push(`${concatTwoWords(currentLine, wordsList[i].substring(0, breakPos))}-`);\r\n\r\n        // break the rest of the new word if it's still too long\r\n        while (breakPos + maxCharInRow < wordsList[i].length) {\r\n          const nextBreakPos = (breakPos + maxCharInRow) - 1;\r\n          res.push(`${wordsList[i].substring(breakPos, nextBreakPos)}-`);\r\n          breakPos = nextBreakPos;\r\n        }\r\n        currentLine = wordsList[i].substring(breakPos);\r\n      } else { // else, end current line and create a new line\r\n        if (currentLine.length > 0) { // avoid adding first empty line\r\n          res.push(currentLine);\r\n        }\r\n        currentLine = wordsList[i];\r\n      }\r\n    } else { // else, just add the new word to current line\r\n      currentLine = concatTwoWords(currentLine, wordsList[i]);\r\n    }\r\n  }\r\n  res.push(currentLine);\r\n  return res;\r\n};\r\n\r\n/**\r\n * Little helper to extract the type for some dictionary node property.\r\n * Export just for testing.\r\n * @param {Object} property one of the properties of a dictionary node\r\n * @return {String|Array<String>} string for scalar types, array for enums\r\n *                   and other listish types or 'UNDEFINED' if no\r\n *                   type information availabale\r\n */\r\nexport const getType = (property) => {\r\n  let type = 'UNDEFINED';\r\n  if ('type' in property) {\r\n    if (typeof property.type === 'string') {\r\n      type = property.type;\r\n    } else {\r\n      type = property.type;\r\n    }\r\n  } else if ('enum' in property) {\r\n    type = property.enum;\r\n  } else if ('oneOf' in property) {\r\n    // oneOf has nested type list - we want to flatten nested enums out here ...\r\n    type = property.oneOf\r\n      .map(item => getType(item))\r\n      .reduce(\r\n        (flatList, it) => {\r\n          if (Array.isArray(it)) {\r\n            return flatList.concat(it);\r\n          }\r\n          flatList.push(it);\r\n          return flatList;\r\n        }, [],\r\n      );\r\n  } else if ('anyOf' in property) {\r\n    // anyOf has nested type list\r\n    type = property.anyOf\r\n      .map(item => getType(item))\r\n      .reduce(\r\n        (flatList, it) => {\r\n          if (Array.isArray(it)) {\r\n            return flatList.concat(it);\r\n          }\r\n          flatList.push(it);\r\n          return flatList;\r\n        }, [],\r\n      );\r\n  } else {\r\n    type = 'UNDEFINED';\r\n  }\r\n\r\n  return type;\r\n};\r\n\r\nexport const downloadTemplate = (format, nodeId) => {\r\n  if (format === 'tsv' || format === 'json') {\r\n    const templatePath = `${dataDictionaryTemplatePath}${nodeId}?format=${format}`;\r\n    window.open(templatePath);\r\n  }\r\n};\r\n\r\nexport const downloadMultiTemplate = (\r\n  format,\r\n  nodesToDownload,\r\n  allRoutes,\r\n  clickingNodeName,\r\n  dictionaryVersion,\r\n) => {\r\n  if (format !== 'tsv' && format !== 'json') {\r\n    return;\r\n  }\r\n  const zip = new JSZip();\r\n  Promise.all(Object.keys(nodesToDownload).map((nodeID) => {\r\n    const fileUrl = `${dataDictionaryTemplatePath}${nodeID}?format=${format}`;\r\n    const saveAsFileName = nodesToDownload[nodeID];\r\n    return fetch(fileUrl).then((response) => {\r\n      if (response.ok) {\r\n        return response.text();\r\n      }\r\n      throw new Error(`cannot download template for node \"${nodeID}\"`);\r\n    }).then((responseText) => {\r\n      zip.file(saveAsFileName, responseText);\r\n    }).catch(() => {\r\n      throw new Error(`cannot download template for node \"${nodeID}\"`);\r\n    });\r\n  })).then(() => {\r\n    const time = new Date();\r\n    const startingNodeName = 'Project';\r\n    let readmeContent = `The following ${format.toUpperCase()} templates were downloaded from ${appname} on ${time.toLocaleDateString()} ${time.toLocaleTimeString()}. The following are all possible paths from \"${startingNodeName}\" node to \"${clickingNodeName}\" using data dictionary version ${dictionaryVersion}. The downloaded ${format.toUpperCase()} files need to be submitted in the order shown in the chosen path(s) below:\\n`;\r\n    readmeContent = readmeContent.concat(\r\n      allRoutes.map((nodeIDsInRoute, routeIndex) => `${routeIndex + 1}. ${nodeIDsInRoute.join(',')}`).join('\\n'),\r\n    );\r\n    zip.file('README.txt', readmeContent);\r\n    zip.generateAsync({ type: 'blob' })\r\n      .then((content) => {\r\n        FileSaver.saveAs(content, `templates-${format}.zip`);\r\n      });\r\n  });\r\n};\r\n\r\nexport const graphStyleConfig = {\r\n  nodeTextFontSize: 10,\r\n  nodeTextLineGap: 4,\r\n  nodeContentPadding: 20,\r\n  nodeIconRadius: 10,\r\n};\r\n\r\nexport const parseDictionaryNodes = dictionary => Object.keys(dictionary).filter(\r\n  id => id.charAt(0) !== '_' && id === dictionary[id].id,\r\n).map(\r\n  (id) => {\r\n    const originNode = dictionary[id];\r\n    return originNode;\r\n  },\r\n).filter(\r\n  node => node.category && node.id,\r\n);\r\n\r\nexport const getPropertyDescription = (property) => {\r\n  let description;\r\n  if ('description' in property) {\r\n    description = property.description;\r\n  }\r\n  if ('term' in property) {\r\n    description = property.term.description;\r\n  }\r\n  return description;\r\n};\r\n\r\nconst searchHistoryLocalStorageKey = 'datadictionary:searchHistory';\r\n/**\r\n * @typedef {Object} SearchHistoryItem\r\n * @property {string} keywordStr - keywordStr of this item\r\n * @property {integer} matchedCount - matched count for this keyword\r\n */\r\n\r\n/**\r\n * Get search history items from localStorage\r\n * @returns {SearchHistoryItem[]} array of search history items\r\n */\r\nexport const getSearchHistoryItems = () => {\r\n  const items = JSON.parse(localStorage.getItem(searchHistoryLocalStorageKey));\r\n  return items;\r\n};\r\n\r\n/**\r\n * Add search history item to localStorage\r\n * @params {SearchHistoryItem} searchHistoryItem - item to add into localStorage\r\n * @returns {SearchHistoryItem[]} array of new search history items\r\n */\r\nexport const addSearchHistoryItems = (searchHistoryItem) => {\r\n  const { keywordStr } = searchHistoryItem;\r\n  if (!keywordStr || keywordStr.length === 0) return getSearchHistoryItems();\r\n  const prevHistory = JSON.parse(localStorage.getItem(searchHistoryLocalStorageKey));\r\n  let newHistory = [];\r\n  if (prevHistory) newHistory = prevHistory.slice(0); // clone array\r\n\r\n  // if item already exists, need to remove item before adding to the beginning\r\n  if (prevHistory && prevHistory.find(item => item.keywordStr === keywordStr)) {\r\n    const index = prevHistory.findIndex(item => item.keywordStr === keywordStr);\r\n    newHistory = prevHistory.slice(0);\r\n    newHistory.splice(index, 1); // remove item\r\n  }\r\n  newHistory.unshift(searchHistoryItem); // add to the beginning\r\n  localStorage.setItem(searchHistoryLocalStorageKey, JSON.stringify(newHistory));\r\n  return newHistory;\r\n};\r\n\r\n/**\r\n * Clear search history item in localStorage\r\n * @returns {SearchHistoryItem[]} empty array as new search history items\r\n */\r\nexport const clearSearchHistoryItems = () => {\r\n  const newHistory = [];\r\n  localStorage.setItem(searchHistoryLocalStorageKey, JSON.stringify(newHistory));\r\n  return newHistory;\r\n};\r\n\r\nexport const MatchedIndicesShape = PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number));\r\n\r\nexport const MatchedItemShape = PropTypes.shape({\r\n  indices: MatchedIndicesShape,\r\n  arrayIndex: PropTypes.number,\r\n  key: PropTypes.string,\r\n  value: PropTypes.string,\r\n});\r\n\r\nexport const SearchItemPropertyShape = PropTypes.shape({\r\n  name: PropTypes.string,\r\n  description: PropTypes.string,\r\n  type: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\r\n});\r\n\r\nexport const SearchItemShape = PropTypes.shape({\r\n  id: PropTypes.string,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string,\r\n  properties: PropTypes.arrayOf(SearchItemPropertyShape),\r\n});\r\n\r\nexport const SearchResultItemShape = PropTypes.shape({\r\n  item: SearchItemShape,\r\n  matches: PropTypes.arrayOf(MatchedItemShape),\r\n});\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#AD91FF\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.5 4.9h.72c.013.005.026.015.038.016.261.015.522.023.782.044.466.037.93.101 1.385.253.377.126.73.322 1.018.707.038.05.057.1.057.177-.002 2.565-.001 5.13-.001 7.696v.107c-.018-.007-.025-.008-.031-.012-.078-.056-.157-.11-.234-.17a3.81 3.81 0 00-1.973-.803c-.51-.053-1.023-.07-1.534-.101-.07-.005-.142-.001-.22-.001v-.15-7.627c0-.046-.005-.09-.007-.136M13.78 4.9h.72c-.002.045-.007.09-.007.135v7.63c0 .044-.003.088-.004.136h-.077a12.62 12.62 0 00-1.784.118 3.978 3.978 0 00-1.863.79c-.084.064-.17.123-.265.191v-.107c0-2.569 0-5.138.002-7.707 0-.051.02-.115.045-.15.147-.207.319-.366.509-.484.33-.205.68-.304 1.035-.375.506-.1 1.015-.14 1.526-.158.054-.002.108-.013.162-.019\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M3.5 5.9h.983v8.114h.12c.61.012 1.22.01 1.828.039.717.033 1.434.105 2.121.374.316.123.618.295.925.446.01.004.016.018.023.027h-6v-9zM11.5 14.9c.006-.01.011-.022.019-.028.5-.36 1.027-.598 1.584-.702a9.748 9.748 0 011.686-.148l.799-.008h.093V5.9h.819v9h-5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"21\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"nonzero\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 .499c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10s-10-4.478-10-10c0-5.523 4.477-10 10-10z\",\n  fill: \"#FF7ABC\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"rotate(-90 10 5)\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"4.5\",\n  height: \"2.7\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"rect\", {\n  y: \"3.6\",\n  width: \"7.2\",\n  height: \"2.7\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M.5 7.2h8a.5.5 0 01.5.5v1.7a.5.5 0 01-.5.5h-8a.5.5 0 01-.5-.5V7.7a.5.5 0 01.5-.5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#27AE60\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11.54 8.807c-.091-.111-.131-.15-.13-.29.005-.942.002-1.957.002-2.9 0-.737-.001-1.475.002-2.212.001-.355-.048-.405-.429-.405H9.12c-.278 0-.362.08-.362.344V5.74c.005.798.004 2.431-.004 2.777a.436.436 0 01-.092.251c-1.315 1.616-2.63 3.232-3.96 4.837-.218.263-.272.501-.101.787.006.01.262.52.456.579.13.039 3.279.039 9.447 0 .206 0 .628-.137.892-.437.107-.122.202-.715-.095-1.06-1.321-1.618-2.438-3.051-3.762-4.667z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#05B8EE\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.45 8.053h2.61V5.45c0-.359.29-.65.65-.65h2.596a.65.65 0 01.648.65v2.602h2.596c.36 0 .65.291.65.65v2.601a.65.65 0 01-.65.652h-2.596v2.595c0 .36-.29.65-.648.65H8.709a.65.65 0 01-.65-.65v-2.595H5.452a.65.65 0 01-.651-.652v-2.6a.65.65 0 01.65-.65z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  xmlnsXlink: \"http://www.w3.org/1999/xlink\"\n}, props), /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  id: \"a\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12.56 9.434c.66.714.551 1.963-.223 2.794-.441.445-1.555 1.18-2.539.294v.866c0 .326-.25.595-.552.595H.552c-.303 0-.552-.27-.552-.595V1.677c0-.327.249-.595.552-.595h1.934V.605c0-.326.249-.594.552-.594h3.727c.303 0 .552.268.552.594v.477h1.932c.302 0 .551.268.551.595v4.786l2.76 2.97zM3.59 1.17v1.01h2.621v-1.01H3.59zM1.077 12.82v.004h7.617V11.34L6.32 8.782c-.083-.088-.138-.177-.138-.297l-.47-2.734c-.053-.603.435-.731.608-.654l2.374.47V2.272h-1.38v.503c-.026.296-.275.566-.551.566H3.038c-.303 0-.552-.27-.552-.595v-.474H1.077v10.55zm10.488-1.424c.387-.418.414-.923.223-1.132L8.477 6.7l-1.574-.327.303 1.723 3.282 3.538c.39.297.856-.03 1.077-.237z\",\n  id: \"b\"\n})), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"use\", {\n  fill: \"#3283C8\",\n  xlinkHref: \"#a\"\n}), /*#__PURE__*/React.createElement(\"use\", {\n  fill: \"#FFF\",\n  xlinkHref: \"#b\",\n  transform: \"translate(5 3)\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#7EC500\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 9.748V4.541c0-.406.192-.603.59-.604l4.483-.004c.148 0 .27.057.374.163l3.287 3.344c.104.105.158.23.158.381l-.004 7.158c0 .301-.134.501-.382.567a.642.642 0 01-.164.017H6.544c-.339 0-.544-.21-.544-.556V9.748z\",\n  fill: \"#FFF\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#7EC500\",\n  fillRule: \"nonzero\",\n  d: \"M10.3 3.933h1V8h-1z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#7EC500\",\n  fillRule: \"nonzero\",\n  d: \"M15 7.5v1h-4.7v-1z\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"nonzero\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#F4B940\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(4.5 6)\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6.5 0h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n}), /*#__PURE__*/React.createElement(\"rect\", {\n  y: \"3\",\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6.5 3h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n}), /*#__PURE__*/React.createElement(\"rect\", {\n  y: \"6\",\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6.5 6h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#E74C3C\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M2.5 10.208h10M16.5 5.5l-4 4.708M16.5 15.5l-4-5.292M7.25 16.5v-12\",\n  stroke: \"#FFF\",\n  strokeLinecap: \"square\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#26D9B1\",\n  cx: \"10\",\n  cy: \"10\",\n  r: \"10\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M4.5 5.5h3a1 1 0 110 2h-3a1 1 0 110-2zM5.5 8.5h3a1 1 0 010 2h-3a1 1 0 110-2zM11.5 8.5h3a1 1 0 010 2h-3a1 1 0 010-2zM7 11.5h3a1 1 0 010 2H7a1 1 0 010-2zM13 11.5h3a1 1 0 010 2h-3a1 1 0 010-2zM10.5 5.5h3a1 1 0 010 2h-3a1 1 0 110-2z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#FF8585\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12.58 8.599l.3-.301a.112.112 0 00.028-.11.114.114 0 00-.084-.077l-1.298-.263a.111.111 0 00-.131.131l.262 1.299c.008.04.037.072.076.084.04.012.082 0 .111-.028l.3-.3.704.703a.11.11 0 00.157 0l.278-.278a.112.112 0 000-.157l-.704-.703z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16.138 14.024l-.647-1.89a.458.458 0 00-.432-.311h-.099a.89.89 0 00.62-.848V4.893A.89.89 0 0014.695 4h-9.49a.89.89 0 00-.885.893v6.082a.89.89 0 00.62.848h-.098a.458.458 0 00-.432.31l-.648 1.891a1.15 1.15 0 00.148 1.035c.212.3.554.48.92.48h10.24c.366 0 .708-.18.92-.48.212-.3.267-.686.148-1.035zM9.95 4.206c.123 0 .224.101.224.226 0 .124-.1.225-.224.225a.225.225 0 01-.223-.225c0-.125.1-.226.223-.226zm-4.745.657l9.52.03v6.111l-9.55-.03.03-6.11zm6.466 9.8a.126.126 0 01-.104.057H8.334a.126.126 0 01-.105-.056.13.13 0 01-.012-.118l.312-.78a.415.415 0 01.384-.261h2.074c.169 0 .32.103.384.261l.312.78a.13.13 0 01-.012.118z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"21\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 .499c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10s-10-4.478-10-10c0-5.523 4.477-10 10-10z\",\n  fill: \"#9B9B9B\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(4 9.5)\",\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"rect\", {\n  width: \"5\",\n  height: \"2\",\n  rx: \".5\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7.5 0h4a.5.5 0 01.5.5v1a.5.5 0 01-.5.5h-4a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#E74C3C\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.807 6.539l-1.976 1.976-1.729-.617-.617-1.73 1.976-1.975a3.723 3.723 0 00-4.737 4.642 1.751 1.751 0 00-.156.137L4.51 13.031a1.74 1.74 0 102.46 2.46l4.059-4.06c.05-.049.095-.1.137-.155a3.722 3.722 0 004.642-4.737z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#05B8EE\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"#FFF\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 9.73c1.38 0 2.5-1.156 2.5-2.88 0-1.723-.367-3.12-2.5-3.12-2.132 0-2.5 1.397-2.5 3.12 0 1.724 1.12 2.88 2.5 2.88zM15.494 14.903c-.054-3.346-.499-4.3-3.9-4.903 0 0-.478.6-1.594.6S8.406 10 8.406 10c-3.364.597-3.836 1.536-3.898 4.794-.005.266-.007.28-.008.25v.351s.81 2.062 5.5 2.062c4.69 0 5.5-2.062 5.5-2.062v-.26c0 .02-.003-.018-.006-.232z\"\n})))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fillRule: \"nonzero\",\n  fill: \"none\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#7EC500\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.81 5H4.19c-.105 0-.19.09-.19.2v9.6c0 .11.085.2.19.2h11.62c.105 0 .19-.09.19-.2V5.2c0-.11-.085-.2-.19-.2zM15 13l-2.69-2.784a.08.08 0 00-.111-.005l-1.866 1.642-2.385-2.935a.08.08 0 00-.126.003L5 12.703V6h10v7z\",\n  fill: \"#FFF\"\n}))));","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nexport default (({\n  styles = {},\n  ...props\n}) => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: \"20\",\n  height: \"20\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), /*#__PURE__*/React.createElement(\"g\", {\n  fill: \"none\",\n  fillRule: \"evenodd\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 0c5.523 0 10 4.477 10 10 0 5.522-4.477 10-10 10S0 15.522 0 10 4.477 0 10 0z\",\n  fill: \"#733EA3\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  transform: \"translate(4 5.5)\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10.8 0H1.2C.54 0 0 .45 0 1v9l2.4-2h8.4c.66 0 1.2-.45 1.2-1V1c0-.55-.54-1-1.2-1z\",\n  fill: \"#FFF\",\n  fillRule: \"nonzero\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#733EA3\",\n  cx: \"3.4\",\n  cy: \"4\",\n  r: \"1\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#733EA3\",\n  cx: \"6.4\",\n  cy: \"4\",\n  r: \"1\"\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#733EA3\",\n  cx: \"9.4\",\n  cy: \"4\",\n  r: \"1\"\n})))));","// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconAdministrative from '-!react-svg-loader!./icons/icon_administrative.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconAnalysis from '-!react-svg-loader!./icons/icon_analysis.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconBiospecimen from '-!react-svg-loader!./icons/icon_biospecimen.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconClinical from '-!react-svg-loader!./icons/icon_clinical.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconClinicalAssessment from '-!react-svg-loader!./icons/icon_clinical_assessment.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconDataFile from '-!react-svg-loader!./icons/icon_data_file.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconMetadata from '-!react-svg-loader!./icons/icon_metadata.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconNotation from '-!react-svg-loader!./icons/icon_notation.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconIndexFile from '-!react-svg-loader!./icons/icon_index_file.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconDataObservations from '-!react-svg-loader!./icons/icon_data_observations.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconDefault from '-!react-svg-loader!./icons/icon_default.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconExperimentalMethods from '-!react-svg-loader!./icons/icon_experimental_methods.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconSubjectCharacteristics from '-!react-svg-loader!./icons/icon_subject_characteristics.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconImaging from '-!react-svg-loader!./icons/icon_imaging.svg';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport IconStudyAdministration from '-!react-svg-loader!./icons/icon_study_administration.svg';\r\n\r\nconst nodeCategoryList = {\r\n  clinical: {\r\n    icon: IconClinical,\r\n    color: '#05B8EE',\r\n  },\r\n  biospecimen: {\r\n    icon: IconBiospecimen,\r\n    color: '#27AE60',\r\n  },\r\n  data_file: {\r\n    icon: IconDataFile,\r\n    color: '#7EC500',\r\n  },\r\n  metadata_file: {\r\n    icon: IconMetadata,\r\n    color: '#F4B940',\r\n  },\r\n  analysis: {\r\n    icon: IconAnalysis,\r\n    color: '#FF7ABC',\r\n  },\r\n  administrative: {\r\n    icon: IconAdministrative,\r\n    color: '#AD91FF',\r\n  },\r\n  notation: {\r\n    icon: IconNotation,\r\n    color: '#E74C3C',\r\n  },\r\n  index_file: {\r\n    icon: IconIndexFile,\r\n    color: '#26D9B1',\r\n  },\r\n  clinical_assessment: {\r\n    icon: IconClinicalAssessment,\r\n    color: '#3283C8',\r\n  },\r\n  medical_history: {\r\n    icon: IconClinical,\r\n    color: '#05B8EE',\r\n  },\r\n  data_observations: {\r\n    icon: IconDataObservations,\r\n    color: '#FF8585',\r\n  },\r\n  experimental_methods: {\r\n    icon: IconExperimentalMethods,\r\n    color: '#E74C3C',\r\n  },\r\n  subject_characteristics: {\r\n    icon: IconSubjectCharacteristics,\r\n    color: '#05B8EE',\r\n  },\r\n  imaging: {\r\n    icon: IconImaging,\r\n    color: '#7EC500',\r\n  },\r\n  study_administration: {\r\n    icon: IconStudyAdministration,\r\n    color: '#733EA3',\r\n  },\r\n};\r\n\r\nconst defaultCategory = {\r\n  icon: IconDefault,\r\n  color: '#9B9B9B',\r\n};\r\n\r\nexport const getCategoryIconSVG = (category) => {\r\n  if (nodeCategoryList[category]) {\r\n    return nodeCategoryList[category].icon;\r\n  }\r\n\r\n  return defaultCategory.icon;\r\n};\r\n\r\nexport const getCategoryColor = (category) => {\r\n  if (nodeCategoryList[category]) {\r\n    return nodeCategoryList[category].color;\r\n  }\r\n\r\n  return defaultCategory.color;\r\n};\r\n","import * as d3 from 'd3-scale';\r\n\r\n//import { submissionApiPath } from './localconf';\r\n\r\nconst submissionApiPath = \"FIXME-submissionApiPath\";\r\n\r\nexport const humanFileSize = (size) => {\r\n  if (typeof size !== 'number') {\r\n    return '';\r\n  }\r\n  const i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024));\r\n  const sizeStr = (size / (1024 ** i)).toFixed(2) * 1;\r\n  const suffix = ['B', 'KB', 'MB', 'GB', 'TB'][i];\r\n  return `${sizeStr} ${suffix}`;\r\n};\r\n\r\nexport const getSubmitPath = (project) => {\r\n  const path = project.split('-');\r\n  const programName = path[0];\r\n  const projectCode = path.slice(1).join('-');\r\n  return `${submissionApiPath}/${programName}/${projectCode}`;\r\n};\r\n\r\nexport const jsonToString = (data, schema = {}) => {\r\n  const replacer = (key, value) => {\r\n    if (value === null) {\r\n      return undefined;\r\n    }\r\n    if (schema[key] === 'number') {\r\n      const castedValue = Number(value);\r\n      if (isNaN(castedValue)) {\r\n        return value;\r\n      }\r\n      return castedValue;\r\n    }\r\n    return value;\r\n  };\r\n  return JSON.stringify(data, replacer, '  ');\r\n};\r\n\r\nexport const predictFileType = (dirtyData, fileType) => {\r\n  const predictType = fileType;\r\n  const jsonType = 'application/json';\r\n  const tsvType = 'text/tab-separated-values';\r\n  const data = dirtyData.trim();\r\n  if (data.indexOf('{') !== -1 || data.indexOf('}') !== -1) {\r\n    return jsonType;\r\n  }\r\n  if (data.indexOf('\\t') !== -1) {\r\n    return tsvType;\r\n  }\r\n  return predictType;\r\n};\r\n\r\n\r\n/**\r\n * Little wrapper around setinterval with a guard to prevent an async function\r\n * from being invoked multiple times.\r\n *\r\n * @param {()=>Promise} lambda callback should return a Promise\r\n * @param {int} timeoutMs passed through to setinterval\r\n * @return the setinterval id (can be passed to clearinterval)\r\n */\r\nexport async function asyncSetInterval(lambda, timeoutMs) {\r\n  let isRunningGuard = false;\r\n  return setInterval(\r\n    () => {\r\n      if (!isRunningGuard) {\r\n        isRunningGuard = true;\r\n\r\n        lambda().then(\r\n          () => { isRunningGuard = false; },\r\n        );\r\n      }\r\n    }, timeoutMs,\r\n  );\r\n}\r\n\r\n\r\nexport const getCategoryColor = (category) => {\r\n  const colorMap = {\r\n    clinical: '#05B8EE',\r\n    biospecimen: '#27AE60',\r\n    data_file: '#7EC500',\r\n    metadata_file: '#F4B940',\r\n    analysis: '#FF7ABC',\r\n    administrative: '#AD91FF',\r\n    notation: '#E74C3C',\r\n    index_file: '#26D9B1',\r\n    clinical_assessment: '#3283C8',\r\n    medical_history: '#05B8EE',\r\n    satellite: d3.schemeCategory20[11],\r\n    radar: d3.schemeCategory20[16],\r\n    stream_gauge: d3.schemeCategory20[19],\r\n    weather_station: d3.schemeCategory20[10],\r\n    data_observations: d3.schemeCategory20[3],\r\n    experimental_methods: d3.schemeCategory20[4],\r\n    Imaging: d3.schemeCategory20[5],\r\n    study_administration: d3.schemeCategory20[6],\r\n    subject_characteristics: d3.schemeCategory20[7],\r\n  };\r\n  const defaultColor = '#9B9B9B';\r\n  return colorMap[category] ? colorMap[category] : defaultColor;\r\n};\r\n\r\nexport function legendCreator(legendGroup, nodes, legendWidth) {\r\n  // Find all unique categories\r\n  const uniqueCategoriesList = nodes.reduce((acc, elem) => {\r\n    if (acc.indexOf(elem.category) === -1) {\r\n      acc.push(elem.category);\r\n    }\r\n    return acc;\r\n  }, []);\r\n  uniqueCategoriesList.sort((aIn, bIn) => {\r\n    const a = aIn.toLowerCase();\r\n    const b = bIn.toLowerCase();\r\n    if (a < b) {\r\n      return -1;\r\n    } else if (a > b) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  },\r\n  );\r\n\r\n  const legendFontSize = '0.9em';\r\n  // Make Legend\r\n  legendGroup.selectAll('text')\r\n    .data(uniqueCategoriesList)\r\n    .enter().append('text')\r\n    .attr('x', legendWidth / 2)\r\n    .attr('y', (d, i) => `${1.5 * (2.5 + i)}em`)\r\n    .attr('text-anchor', 'middle')\r\n    .attr('fill', d => getCategoryColor(d))\r\n    .style('font-size', legendFontSize)\r\n    .text(d => d);\r\n\r\n  legendGroup.append('text')\r\n    .attr('x', legendWidth / 2)\r\n    .attr('y', `${2}em`)\r\n    .attr('text-anchor', 'middle')\r\n    .text('Categories')\r\n    .style('font-size', legendFontSize)\r\n    .style('text-decoration', 'underline');\r\n}\r\n\r\n\r\nexport function addArrows(graphSvg) {\r\n  graphSvg.append('svg:defs')\r\n    .append('svg:marker')\r\n    .attr('id', 'end-arrow')\r\n    .attr('viewBox', '0 -5 10 10')\r\n    .attr('fill', 'darkgray')\r\n    .attr('refX', 0)\r\n    .attr('refY', 0)\r\n    .attr('markerWidth', 6)\r\n    .attr('markerHeight', 6)\r\n    .attr('orient', 'auto')\r\n    .append('svg:path')\r\n    .attr('d', 'M0,-5L10,0L0,5');\r\n}\r\n\r\nexport function addLinks(graphSvg, edges) {\r\n  return graphSvg.append('g')\r\n    .selectAll('path')\r\n    .data(edges)\r\n    .enter()\r\n    .append('path')\r\n    .attr('stroke-width', 2)\r\n    .attr('marker-mid', 'url(#end-arrow)')\r\n    .attr('stroke', 'darkgray')\r\n    .attr('fill', 'none');\r\n}\r\n\r\n\r\n/**\r\n * Compute SVG coordinates fx, fy for each node in nodes.\r\n * Decorate each node with .fx and .fy property as side effect.\r\n *\r\n * @param {Array<Node>} nodes each decorated with a position [width,height] in [0,1]\r\n * @param {*} graphWidth\r\n * @param {*} graphHeight\r\n */\r\nexport function calculatePosition(nodes, graphWidth, graphHeight) {\r\n  // Calculate the appropriate position of each node on the graph\r\n  const fyVals = [];\r\n  const retNodes = nodes;\r\n  for (let i = 0; i < nodes.length; i += 1) {\r\n    retNodes[i].fx = retNodes[i].position[0] * graphWidth;\r\n    retNodes[i].fy = retNodes[i].position[1] * graphHeight;\r\n    if (fyVals.indexOf(retNodes[i].fy) === -1) {\r\n      fyVals.push(retNodes[i].fy);\r\n    }\r\n  }\r\n  return { retNodes, fyValsLength: fyVals.length };\r\n}\r\n\r\n/**\r\n * Type agnostic compare thunk for Array.sort\r\n * @param {*} a\r\n * @param {*} b\r\n */\r\nexport function sortCompare(a, b) {\r\n  if (a === b) { return 0; }\r\n  return a < b ? -1 : 1;\r\n}\r\n\r\nexport function computeLastPageSizes(filesMap, pageSize) {\r\n  return Object.keys(filesMap).reduce((d, key) => {\r\n    const result = d;\r\n    result[key] = filesMap[key].length % pageSize;\r\n    return result;\r\n  }, {});\r\n}\r\n\r\nexport function capitalizeFirstLetter(str) {\r\n  const res = str.replace(/_/gi, ' ');\r\n  return res.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\r\n}\r\n\r\n/**\r\n * Avoid importing underscore just for this ... export for testing\r\n * @method intersection\r\n * @param aList {Array<String>}\r\n * @param bList {Array<String>}\r\n * @return list of intersecting elements\r\n */\r\nexport function intersection(aList, bList) {\r\n  const key2Count = aList.concat(bList).reduce(\r\n    (db, it) => {\r\n      const res = db;\r\n      if (res[it]) { res[it] += 1; } else { res[it] = 1; }\r\n      return res;\r\n    }, {},\r\n  );\r\n  return Object.entries(key2Count)\r\n    .filter(kv => kv[1] > 1)\r\n    .map(([k]) => k);\r\n}\r\n\r\nexport function minus(aList, bList) {\r\n  const key2Count = aList.concat(bList).concat(aList).reduce(\r\n    (db, it) => {\r\n      const res = db;\r\n      if (res[it]) { res[it] += 1; } else { res[it] = 1; }\r\n      return res;\r\n    }, {},\r\n  );\r\n  return Object.entries(key2Count)\r\n    .filter(kv => kv[1] === 2)\r\n    .map(([k]) => k);\r\n}\r\n\r\nexport const parseParamWidth = width => ((typeof width === 'number') ? `${width}px` : width);\r\n\r\nexport const isPageFullScreen = pathname => (!!((pathname\r\n  && (pathname.toLowerCase() === '/dd'\r\n  || pathname.toLowerCase().startsWith('/dd/')\r\n  || pathname.toLowerCase() === '/cohort-tools'\r\n  || pathname.toLowerCase().startsWith('/cohort-tools/')\r\n  ))));\r\n\r\nexport const isFooterHidden = pathname => (!!((pathname\r\n  && (pathname.toLowerCase() === '/dd'\r\n  || pathname.toLowerCase().startsWith('/dd/')\r\n  ))));\r\n","import React from 'react';\r\nimport { getPropertyDescription, getType } from './utils';\r\n\r\nconst escapeReturnChar = (str, newlineClassName) => {\r\n  if (!str) return str;\r\n  const pieces = str.split('\\\\n');\r\n  if (pieces.length <= 1) return str;\r\n  return pieces.map((piece, i) => (\r\n    <span\r\n      key={`span-${i}`}\r\n      className={(i === 0 || i === pieces.length) ? '' : newlineClassName}\r\n    >\r\n      {piece}\r\n    </span>\r\n  ));\r\n};\r\n\r\nconst addHighlightingSpans = (str, indices, spanClassName) => {\r\n  let cursor = 0;\r\n  let currentIndices = 0;\r\n  const resultFragments = [];\r\n  const highlightSpanClassName = `${spanClassName}--highlight`;\r\n  const newlineClassName = `${spanClassName}--new-line`;\r\n  while (currentIndices < indices.length) {\r\n    if (cursor < indices[currentIndices][0]) {\r\n      resultFragments.push(\r\n        (\r\n          <div\r\n            key={cursor}\r\n            className={spanClassName}\r\n          >\r\n            {escapeReturnChar(str.substring(cursor, indices[currentIndices][0]), newlineClassName)}\r\n          </div>\r\n        ),\r\n      );\r\n    }\r\n    resultFragments.push(\r\n      (\r\n        <div\r\n          key={indices[currentIndices][0]}\r\n          className={`${spanClassName} ${highlightSpanClassName}`}\r\n        >\r\n          {\r\n            escapeReturnChar(\r\n              str.substring(\r\n                indices[currentIndices][0],\r\n                indices[currentIndices][1] + 1),\r\n              newlineClassName,\r\n            )\r\n          }\r\n        </div>\r\n      ),\r\n    );\r\n    cursor = indices[currentIndices][1] + 1;\r\n    currentIndices += 1;\r\n  }\r\n  if (cursor < str.length) {\r\n    resultFragments.push(\r\n      (\r\n        <div\r\n          key={cursor}\r\n          className={spanClassName}\r\n        >\r\n          {escapeReturnChar(str.substring(cursor), newlineClassName)}\r\n        </div>\r\n      ),\r\n    );\r\n  }\r\n  return resultFragments;\r\n};\r\n\r\nexport const getPropertyNameFragment = (propertyName, matchedItem, spanClassName) => {\r\n  const propertyNameFragment = addHighlightingSpans(\r\n    propertyName,\r\n    matchedItem ? matchedItem.indices : [],\r\n    spanClassName,\r\n  );\r\n  return propertyNameFragment;\r\n};\r\n\r\nexport const getPropertyTypeFragment = (property, typeMatchList, spanClassName) => {\r\n  const type = getType(property);\r\n  let propertyTypeFragment;\r\n  console.log(type);\r\n  if (typeof type === 'string') {\r\n    propertyTypeFragment = (\r\n      <li>\r\n        {\r\n          addHighlightingSpans(\r\n            type,\r\n            (typeMatchList && typeMatchList[0]) ? typeMatchList[0].indices : [],\r\n            spanClassName,\r\n          )\r\n        }\r\n      </li>\r\n    );\r\n  } else {\r\n    propertyTypeFragment = type.map((t, i) => {\r\n      const matchedTypeItem = typeMatchList && typeMatchList.find(\r\n        matchItem => matchItem.value === t);\r\n      if (matchedTypeItem) {\r\n        return (\r\n          <li key={i}>\r\n            {\r\n              addHighlightingSpans(\r\n                t,\r\n                matchedTypeItem.indices,\r\n                spanClassName,\r\n              )\r\n            }\r\n          </li>\r\n        );\r\n      }\r\n      return (\r\n        <li key={i}>\r\n          {\r\n            addHighlightingSpans(\r\n              t,\r\n              [],\r\n              spanClassName,\r\n            )\r\n          }\r\n        </li>\r\n      );\r\n    });\r\n  }\r\n  return propertyTypeFragment;\r\n};\r\n\r\nexport const getPropertyDescriptionFragment = (property, matchedItem, spanClassName) => {\r\n  let descriptionStr = getPropertyDescription(property);\r\n  if (!descriptionStr) descriptionStr = 'No Description';\r\n  const propertyDescriptionFragment = addHighlightingSpans(\r\n    descriptionStr,\r\n    matchedItem ? matchedItem.indices : [],\r\n    spanClassName,\r\n  );\r\n  return propertyDescriptionFragment;\r\n};\r\n\r\nexport const getNodeTitleFragment = (allMatches, title, spanClassName) => {\r\n  const matchedItem = allMatches.find(item => item.key === 'title');\r\n  const nodeTitleFragment = addHighlightingSpans(\r\n    title,\r\n    matchedItem ? matchedItem.indices : [],\r\n    spanClassName,\r\n  );\r\n  return nodeTitleFragment;\r\n};\r\n\r\nexport const getNodeDescriptionFragment = (allMatches, description, spanClassName) => {\r\n  const matchedItem = allMatches.find(item => item.key === 'description');\r\n  const nodeDescriptionFragment = addHighlightingSpans(\r\n    description,\r\n    matchedItem ? matchedItem.indices : [],\r\n    spanClassName,\r\n  );\r\n  return nodeDescriptionFragment;\r\n};\r\n\r\nexport const getMatchInsideProperty = (propertyIndex, propertyKey, property, allMatches) => {\r\n  let nameMatch = null;\r\n  let descriptionMatch = null;\r\n  const typeMatchList = [];\r\n  if (allMatches) {\r\n    allMatches.forEach((item) => {\r\n      if (item.key === 'properties.name' && item.value === propertyKey) {\r\n        nameMatch = item;\r\n      } else if (item.key === 'properties.description') {\r\n        const descriptionStr = getPropertyDescription(property);\r\n        //console.log(descriptionStr);\r\n        if (item.value === descriptionStr) {\r\n          descriptionMatch = item;\r\n        }\r\n      } else if (item.key === 'properties.type') {\r\n        const type = getType(property);\r\n        //console.log(type);\r\n        if (typeof type === 'string') {\r\n          if (type === item.value) {\r\n            typeMatchList.push(item);\r\n          }\r\n        } else if (Array.isArray(type)) {\r\n          //console.log(\"yes\");\r\n          for(var a=0;a<type.length;a++){\r\n            \r\n            if(type[a] == item.value){\r\n              typeMatchList.push(item);\r\n            }\r\n          }\r\n          \r\n        }\r\n      }\r\n    });\r\n  }\r\n  return {\r\n    nameMatch,\r\n    descriptionMatch,\r\n    typeMatchList,\r\n  };\r\n};\r\n\r\nexport const getMatchesSummaryForProperties = (allProperties, allMatches) => {\r\n  //console.log(allProperties);\r\n  console.log(allMatches);\r\n  const matchedPropertiesSummary = [];\r\n  Object.keys(allProperties).forEach((propertyKey, propertyIndex) => {\r\n    const property = allProperties[propertyKey];\r\n    const {\r\n      nameMatch,\r\n      descriptionMatch,\r\n      typeMatchList,\r\n    } = getMatchInsideProperty(propertyIndex, propertyKey, property, allMatches);\r\n    //console.log(descriptionMatch);\r\n    const summaryItem = {\r\n      propertyKey,\r\n      property,\r\n      nameMatch,\r\n      descriptionMatch,\r\n      typeMatchList,\r\n    };\r\n    if (nameMatch || descriptionMatch || typeMatchList.length > 0) {\r\n      matchedPropertiesSummary.push(summaryItem);\r\n    }\r\n  });\r\n  //console.log(matchedPropertiesSummary);\r\n  return matchedPropertiesSummary;\r\n  \r\n};\r\n\r\nexport const getNodeTitleSVGFragment = (\r\n  nodeNames,\r\n  matchedNodeNameIndices,\r\n  fontSize,\r\n  textPadding,\r\n  textLineGap,\r\n) => {\r\n  const nodeTitleFragment = [];\r\n  let currentRowIndex = 0;\r\n  let rowStartIndex = 0;\r\n  let rowEndIndex;\r\n  const nodeNameRows = nodeNames;\r\n  let currentHighlightIndex = 0;\r\n  const textAttrBase = {\r\n    x: 0,\r\n    textAnchor: 'middle',\r\n    alignmentBaseline: 'hanging',\r\n    fontSize,\r\n    className: 'graph-node__text',\r\n  };\r\n  const tspanAttrBase = {\r\n    textAnchor: 'middle',\r\n    alignmentBaseline: 'hanging',\r\n    fontSize,\r\n  };\r\n  const tspanAttr = {\r\n    ...tspanAttrBase,\r\n    className: 'graph-node__tspan',\r\n  };\r\n  const tspanHighlightAttr = {\r\n    ...tspanAttrBase,\r\n    className: 'graph-node__tspan graph-node__tspan--highlight',\r\n  };\r\n  while (currentRowIndex < nodeNameRows.length) { // for each row\r\n    const currentRowStr = nodeNameRows[currentRowIndex];\r\n    rowEndIndex = rowStartIndex + currentRowStr.length;\r\n    const textY = textPadding +\r\n      (currentRowIndex * (fontSize + textLineGap));\r\n    const textAttr = {\r\n      ...textAttrBase,\r\n      key: currentRowIndex,\r\n      y: textY,\r\n    };\r\n    let cursorInRow = 0;\r\n    const currentRowFragment = [];\r\n\r\n    // Go over all highlighted text in current row\r\n    while (currentHighlightIndex < matchedNodeNameIndices.length) {\r\n      const highlightStartIndex = matchedNodeNameIndices[currentHighlightIndex][0];\r\n      const highlightEndIndex = matchedNodeNameIndices[currentHighlightIndex][1] + 1;\r\n      if (highlightStartIndex > rowEndIndex) {\r\n        currentRowFragment.push((\r\n          <tspan key={cursorInRow} {...tspanAttr}>\r\n            {currentRowStr.substring(cursorInRow)}\r\n          </tspan>\r\n        ));\r\n        cursorInRow = currentRowStr.length;\r\n        break;\r\n      }\r\n      const highlightStartIndexInRow = highlightStartIndex - rowStartIndex;\r\n      const highlightEndIndexInRow = highlightEndIndex - rowStartIndex;\r\n      if (cursorInRow < highlightStartIndexInRow) {\r\n        currentRowFragment.push((\r\n          <tspan key={cursorInRow} {...tspanAttr}>\r\n            {currentRowStr.substring(cursorInRow, highlightStartIndexInRow)}\r\n          </tspan>\r\n        ));\r\n        cursorInRow = highlightStartIndexInRow;\r\n      }\r\n      if (highlightEndIndex <= rowEndIndex) {\r\n        currentRowFragment.push((\r\n          <tspan key={cursorInRow} {...tspanHighlightAttr}>\r\n            {currentRowStr.substring(cursorInRow, highlightEndIndexInRow)}\r\n          </tspan>\r\n        ));\r\n        cursorInRow = highlightEndIndexInRow;\r\n        currentHighlightIndex += 1;\r\n      } else {\r\n        currentRowFragment.push((\r\n          <tspan key={cursorInRow} {...tspanHighlightAttr}>\r\n            {currentRowStr.substring(cursorInRow)}\r\n          </tspan>\r\n        ));\r\n        cursorInRow = currentRowStr.lenght;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Check text in the current row are all added to the list\r\n    if (cursorInRow < currentRowStr.length) {\r\n      currentRowFragment.push((\r\n        <tspan key={cursorInRow} {...tspanAttr}>{currentRowStr.substring(cursorInRow)}</tspan>\r\n      ));\r\n    }\r\n\r\n    // Add all fragment of current line to the node title fragment list\r\n    nodeTitleFragment.push((\r\n      <text {...textAttr}>{currentRowFragment}</text>\r\n    ));\r\n    currentRowIndex += 1;\r\n    rowStartIndex += currentRowStr.length + 1;\r\n  } // end of while, go to the next row\r\n  return nodeTitleFragment;\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { SearchResultItemShape } from '../../utils';\r\nimport {\r\n  getMatchesSummaryForProperties,\r\n  getPropertyNameFragment,\r\n  getPropertyDescriptionFragment,\r\n  getPropertyTypeFragment,\r\n} from '../../highlightHelper';\r\nimport './DataDictionaryPropertyTable.css';\r\n\r\nclass DataDictionaryPropertyTable extends React.Component {\r\n  render() {\r\n    const borderModifier = this.props.hasBorder ? ''\r\n      : 'data-dictionary-property-table--without-border';\r\n    const propertyKeysList = this.props.hideIsRequired ? Object.keys(this.props.properties)\r\n      : Object.keys(this.props.properties)\r\n        .sort((k1, k2) => {\r\n          const required1 = this.props.requiredProperties.includes(k1);\r\n          const required2 = this.props.requiredProperties.includes(k2);\r\n          if (required1) return -1;\r\n          if (required2) return 1;\r\n          return 0;\r\n        });\r\n    const needHighlightSearchResult = this.props.onlyShowMatchedProperties\r\n      || this.props.needHighlightSearchResult;\r\n    const matchedPropertiesSummary = needHighlightSearchResult\r\n      ? getMatchesSummaryForProperties(\r\n        this.props.properties,\r\n        this.props.matchedResult.matches,\r\n      ) : [];\r\n    return (\r\n      <div className={`data-dictionary-property-table ${borderModifier}`}>\r\n        <table className='data-dictionary-property-table__table'>\r\n          <thead className='data-dictionary-property-table__head'>\r\n            <tr className='data-dictionary-property-table__row'>\r\n              <th\r\n                className='data-dictionary-property-table__data\r\n                data-dictionary-property-table__data--property'\r\n              >\r\n                Property\r\n              </th>\r\n              <th\r\n                className='data-dictionary-property-table__data\r\n                data-dictionary-property-table__data--type'\r\n              >\r\n                Type\r\n              </th>\r\n              {\r\n                !this.props.hideIsRequired && (\r\n                  <th\r\n                    className='data-dictionary-property-table__data\r\n                    data-dictionary-property-table__data--required'\r\n                  >\r\n                    Required\r\n                  </th>\r\n                )\r\n              }\r\n              <th\r\n                className='data-dictionary-property-table__data\r\n                data-dictionary-property-table__data--description'\r\n              >\r\n                Description\r\n              </th>\r\n              <th\r\n                className='data-dictionary-property-table__data\r\n                data-dictionary-property-table__data--term'\r\n              >\r\n                Src\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n              propertyKeysList.map((propertyKey) => {\r\n                const property = this.props.properties[propertyKey];\r\n                let nameMatch = null;\r\n                let descriptionMatch = null;\r\n                let typeMatchList = null;\r\n                if (this.props.needHighlightSearchResult) {\r\n                  const matchedSummaryItem = matchedPropertiesSummary\r\n                    .find(item => item.propertyKey === propertyKey);\r\n                  if (matchedSummaryItem) {\r\n                    nameMatch = matchedSummaryItem.nameMatch;\r\n                    descriptionMatch = matchedSummaryItem.descriptionMatch;\r\n                    typeMatchList = matchedSummaryItem.typeMatchList;\r\n                  } else if (this.props.onlyShowMatchedProperties) {\r\n                    return null;\r\n                  }\r\n                }\r\n                let termID = '';\r\n                let termLink = '';\r\n                let type='';\r\n                if ('src' in property) {\r\n                  try{termID = property.src;\r\n                    termLink = property.term.termDef && property.term.termDef.term_url;}catch(err){}\r\n                  \r\n                }\r\n                const propertyNameFragment = getPropertyNameFragment(\r\n                  propertyKey,\r\n                  nameMatch,\r\n                  'data-dictionary-property-table__span',\r\n                );\r\n                if('type' in property){\r\n                  try{\r\n                    type = property.type;}catch(err){}\r\n                  \r\n                }\r\n               \r\n                const propertyDescriptionFragment = getPropertyDescriptionFragment(\r\n                  property,\r\n                  descriptionMatch,\r\n                  'data-dictionary-property-table__span',\r\n                );\r\n                const isRequired = this.props.requiredProperties.includes(propertyKey);\r\n                return (\r\n                  <tr key={propertyKey}>\r\n                    <td className='data-dictionary-property-table__data'>\r\n                      {propertyNameFragment}\r\n                    </td>\r\n                    <td className='data-dictionary-property-table__data'>\r\n                    <p>{JSON.stringify(type)}</p>\r\n                    </td>\r\n                    {\r\n                      !this.props.hideIsRequired && (\r\n                        <td className='data-dictionary-property-table__data'>\r\n                          { isRequired ? (\r\n                            <span className='data-dictionary-property-table__required'>\r\n                              <i className='g3-icon g3-icon--star data-dictionary-property-table__required-icon' />Required\r\n                            </span>\r\n                          ) : (\r\n                            <span>No</span>\r\n                          )\r\n                          }\r\n                        </td>\r\n                      )\r\n                    }\r\n                    <td className='data-dictionary-property-table__data'>\r\n                    <p>{propertyDescriptionFragment}</p>\r\n                    </td>\r\n                    <td className='data-dictionary-property-table__data'>\r\n                      <p>{JSON.stringify(termID)}</p>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDataDictionaryPropertyTable.propTypes = {\r\n  properties: PropTypes.object.isRequired,\r\n  requiredProperties: PropTypes.array,\r\n  hasBorder: PropTypes.bool,\r\n  needHighlightSearchResult: PropTypes.bool,\r\n  matchedResult: SearchResultItemShape,\r\n  hideIsRequired: PropTypes.bool,\r\n  onlyShowMatchedProperties: PropTypes.bool,\r\n};\r\n\r\nDataDictionaryPropertyTable.defaultProps = {\r\n  requiredProperties: [],\r\n  hasBorder: true,\r\n  needHighlightSearchResult: false,\r\n  matchedResult: {},\r\n  hideIsRequired: false,\r\n  onlyShowMatchedProperties: false,\r\n};\r\n\r\nexport default DataDictionaryPropertyTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@gen3/ui-component/dist/components/Button';\r\nimport { downloadTemplate } from '../../utils';\r\nimport { getCategoryColor } from '../../NodeCategories/helper';\r\nimport DataDictionaryPropertyTable from '../DataDictionaryPropertyTable/.';\r\nimport './DataDictionaryNode.css';\r\n\r\nclass DataDictionaryNode extends React.Component {\r\n  handleClickNode(nodeID) {\r\n    if (!this.props.expanded) {\r\n      this.props.onExpandNode(nodeID);\r\n    } else {\r\n      this.props.onExpandNode(null);\r\n    }\r\n  }\r\n\r\n  handleCloseNode = () => {\r\n    this.props.onExpandNode(null);\r\n  }\r\n\r\n  handleDownloadTemplate = (e, format) => {\r\n    e.stopPropagation(); // no toggling\r\n    downloadTemplate(format, this.props.node.id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className='data-dictionary-node'\r\n          style={{ borderLeftColor: getCategoryColor(this.props.node.category) }}\r\n          onClick={() => this.handleClickNode(this.props.node.id)}\r\n          onKeyPress={() => this.handleClickNode(this.props.node.id)}\r\n          role='button'\r\n          tabIndex={0}\r\n        >\r\n          <span\r\n            className='data-dictionary-node__title'\r\n          >\r\n            <i className='g3-icon g3-icon--folder data-dictionary-node__file-icon' />\r\n            {this.props.node.title}\r\n            <i className={`g3-icon g3-icon--chevron-${this.props.expanded ? 'down' : 'right'} data-dictionary-node__toggle-icon`} />\r\n          </span>\r\n          <span\r\n            className='data-dictionary-node__description'\r\n          >\r\n            {this.props.description}\r\n          </span>\r\n          <div className='data-dictionary-node__download-group'>\r\n            <span className='data-dictionary-node__button-wrap'>\r\n              <Button\r\n                className='data-dictionary-node__download-button'\r\n                onClick={(e) => { this.handleDownloadTemplate(e, 'json'); }}\r\n                label='JSON'\r\n                rightIcon='download'\r\n                buttonType='secondary'\r\n              />\r\n            </span>\r\n            <span className='data-dictionary-node__button-wrap'>\r\n              <Button\r\n                className='data-dictionary-node__download-button'\r\n                onClick={(e) => { this.handleDownloadTemplate(e, 'tsv'); }}\r\n                label='TSV'\r\n                rightIcon='download'\r\n                buttonType='secondary'\r\n              />\r\n            </span>\r\n          </div>\r\n        </div>\r\n        {\r\n          this.props.expanded && (\r\n            <div className='data-dictionary-node__property'>\r\n              <span\r\n                className='data-dictionary-node__property-close'\r\n                onClick={this.handleCloseNode}\r\n                onKeyPress={this.handleCloseNode}\r\n                role='button'\r\n                tabIndex={0}\r\n              >\r\n                Close tab\r\n                <i className='g3-icon g3-icon--cross data-dictionary-node__property-close-icon' />\r\n              </span>\r\n              <div className='data-dictionary-node__property-summary'>\r\n                <span>{this.props.node.title}</span>\r\n                <span> has </span>\r\n                <span>{Object.keys(this.props.node.properties).length}</span>\r\n                <span> properties. </span>\r\n              </div>\r\n              <DataDictionaryPropertyTable\r\n                properties={this.props.node.properties}\r\n                requiredProperties={this.props.node.required}\r\n              />\r\n            </div>\r\n          )\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nDataDictionaryNode.propTypes = {\r\n  node: PropTypes.object.isRequired,\r\n  description: PropTypes.string,\r\n  expanded: PropTypes.bool,\r\n  onExpandNode: PropTypes.func,\r\n};\r\n\r\nDataDictionaryNode.defaultProps = {\r\n  description: '',\r\n  expanded: false,\r\n  onExpandNode: () => {},\r\n};\r\n\r\nexport default DataDictionaryNode;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getCategoryColor, getCategoryIconSVG } from '../../NodeCategories/helper';\r\nimport { capitalizeFirstLetter } from '../../../utils';\r\nimport DataDictionaryNode from '../DataDictionaryNode/.';\r\nimport './DataDictionaryCategory.css';\r\n\r\nclass DataDictionaryCategory extends React.Component {\r\n  render() {\r\n    const IconSVG = getCategoryIconSVG(this.props.category);\r\n    return (<div className='data-dictionary-category'>\r\n      <div className='data-dictionary-category__head' style={{ borderLeftColor: getCategoryColor(this.props.category) }}>\r\n        <IconSVG className='data-dictionary-category__icon' />\r\n        <span>\r\n          {capitalizeFirstLetter(this.props.category)}\r\n        </span>\r\n        <span className='data-dictionary-category__download_template'>Download Template</span>\r\n      </div>\r\n      {\r\n        this.props.nodes.map(\r\n          node => (<DataDictionaryNode\r\n            node={node}\r\n            key={node.id}\r\n            description={node.description}\r\n            expanded={this.props.highlightingNodeID && this.props.highlightingNodeID === node.id}\r\n            onExpandNode={this.props.onExpandNode}\r\n          />),\r\n        )\r\n      }\r\n    </div>);\r\n  }\r\n}\r\n\r\nDataDictionaryCategory.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n  nodes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      description: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  highlightingNodeID: PropTypes.string,\r\n  onExpandNode: PropTypes.func,\r\n};\r\n\r\nDataDictionaryCategory.defaultProps = {\r\n  highlightingNodeID: null,\r\n  onExpandNode: () => {},\r\n};\r\n\r\nexport default DataDictionaryCategory;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './DataDictionaryTable.css';\r\nimport { parseDictionaryNodes } from '../../utils';\r\nimport DataDictionaryCategory from '../DataDictionaryCategory/.';\r\n\r\n/**\r\n * Just exported for testing\r\n * Little helper that extacts a mapping of category-name to\r\n * the list of nodes in that category given a dictionary definition object\r\n *\r\n * @param {Object} dictionary\r\n * @return {} mapping from category to node list\r\n */\r\n/* eslint-disable no-param-reassign */\r\nexport function category2NodeList(dictionary) {\r\n  const res = Object.keys(dictionary).filter(\r\n    id => id.charAt(0) !== '_' && id === dictionary[id].id,\r\n  ).map(\r\n    id => dictionary[id],\r\n  ).filter(\r\n    node => node.category && node.id,\r\n  )\r\n    .reduce(\r\n      (lookup, node) => {\r\n        if (!lookup[node.category]) {\r\n          lookup[node.category] = [];\r\n        }\r\n        lookup[node.category].push(node);\r\n        return lookup;\r\n      }, {},\r\n    );\r\n  return res;\r\n}\r\n/* eslint-enable no-param-reassign */\r\n\r\nconst getNodePropertyCount = (dictionary) => {\r\n  const res = parseDictionaryNodes(dictionary)\r\n    .reduce((acc, node) => {\r\n      acc.nodesCount += 1;\r\n      acc.propertiesCount += Object.keys(node.properties).length;\r\n      return acc;\r\n    }, {\r\n      nodesCount: 0,\r\n      propertiesCount: 0,\r\n    });\r\n  return {\r\n    nodesCount: res.nodesCount,\r\n    propertiesCount: res.propertiesCount,\r\n  };\r\n};\r\n\r\n/**\r\n * Little components presents an overview of the types in a dictionary organized by category\r\n *\r\n * @param {dictionary} params\r\n */\r\nconst DataDictionaryTable = ({ dictionary, highlightingNodeID, onExpandNode, dictionaryName }) => {\r\n  const c2nl = category2NodeList(dictionary);\r\n  const { nodesCount, propertiesCount } = getNodePropertyCount(dictionary);\r\n  return (\r\n    <React.Fragment>\r\n      <p>\r\n        <span>{dictionaryName}</span>\r\n        <span> dictionary has </span>\r\n        <span>{nodesCount}</span>\r\n        <span> nodes and </span>\r\n        <span>{propertiesCount}</span>\r\n        <span> properties </span>\r\n      </p>\r\n      {Object.keys(c2nl).map(category =>\r\n        (<DataDictionaryCategory\r\n          key={category}\r\n          nodes={c2nl[category]}\r\n          category={category}\r\n          highlightingNodeID={highlightingNodeID}\r\n          onExpandNode={onExpandNode}\r\n        />))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nDataDictionaryTable.propTypes = {\r\n  dictionary: PropTypes.object,\r\n  highlightingNodeID: PropTypes.string,\r\n  onExpandNode: PropTypes.func,\r\n  dictionaryName: PropTypes.string,\r\n};\r\n\r\nDataDictionaryTable.defaultProps = {\r\n  dictionary: {},\r\n  highlightingNodeID: null,\r\n  onExpandNode: () => {},\r\n  dictionaryName: '',\r\n};\r\n\r\nexport default DataDictionaryTable;\r\n","import { connect } from 'react-redux';\r\nimport { setExpandNode } from '../../action';\r\nimport DataDictionaryTable from './DataDictionaryTable';\r\n\r\nconst ReduxDataDictionaryTable = (() => {\r\n  const mapStateToProps = state => ({\r\n    dictionary: state.submission.dictionary,\r\n    highlightingNodeID: state.ddgraph.tableExpandNodeID,\r\n    dictionaryName: \"Dictionary Utils Viz\",\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onExpandNode: nodeID =>\r\n      dispatch(setExpandNode(nodeID)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(DataDictionaryTable);\r\n})();\r\n\r\nexport default ReduxDataDictionaryTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@gen3/ui-component/dist/components/Button';\r\nimport Dropdown from '@gen3/ui-component/dist/components/Dropdown';\r\nimport { getCategoryIconSVG } from '../NodeCategories/helper';\r\nimport { downloadMultiTemplate } from '../utils';\r\nimport { intersection } from '../../utils';\r\nimport './DataModelStructure.css';\r\n\r\nclass DataModelStructure extends React.Component {\r\n  handleClickGraphButton = () => {\r\n    this.props.onSetGraphView(true);\r\n    this.props.onResetGraphCanvas();\r\n  };\r\n\r\n  handleClickOverlayPropertyButton = () => {\r\n    this.props.onSetGraphView(true);\r\n    this.props.onSetOverlayPropertyTableHidden(!this.props.overlayPropertyHidden);\r\n  };\r\n\r\n  downloadTemplatesEnabled = () => {\r\n    if (this.props.relatedNodeIDs.length > this.props.excludedNodesForTemplates) return true;\r\n    const intersectionNodeIDs = intersection(\r\n      this.props.relatedNodeIDs,\r\n      this.props.excludedNodesForTemplates,\r\n    );\r\n    return intersectionNodeIDs.length !== this.props.relatedNodeIDs.length;\r\n  }\r\n\r\n  handleDownloadAllTemplates = (format) => {\r\n    const nodesToDownload = {};\r\n    this.props.relatedNodeIDs\r\n      .filter(nid => !this.props.excludedNodesForTemplates.includes(nid))\r\n      .forEach((nid) => {\r\n        nodesToDownload[nid] = `${nid}-template.${format}`;\r\n      }, []);\r\n    const allRoutes = this.props.allRoutes.map(nodeIDsInRoute =>\r\n      nodeIDsInRoute.filter(nid => !this.props.excludedNodesForTemplates.includes(nid)));\r\n    this.props.downloadMultiTemplate(\r\n      format,\r\n      nodesToDownload,\r\n      allRoutes,\r\n      this.props.clickingNodeName,\r\n      this.props.dictionaryVersion,\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.dataModelStructure) return (<React.Fragment />);\r\n    return (\r\n      <div className='data-model-structure'>\r\n        <h4 className='data-model-structure__header'>Data Model Structure</h4>\r\n        <div className='data-model-structure__containter'>\r\n          <div className='data-model-structure__path-line' />\r\n          {\r\n            this.props.dataModelStructure.map((entry, i) => {\r\n              const { nodeID, nodeIDsBefore, linksBefore, category } = entry;\r\n              const IconSVG = getCategoryIconSVG(category);\r\n              const lastNodeModifier = (i === this.props.dataModelStructure.length - 1) ? 'data-model-structure__node-name--last' : '';\r\n              return (\r\n                <React.Fragment key={nodeID}>\r\n                  {\r\n                    nodeIDsBefore.length > 0 && (\r\n                      <React.Fragment>\r\n                        <div className='data-model-structure__summary-between'>{nodeIDsBefore.length} nodes with {linksBefore.length} links</div>\r\n                        {\r\n                          !this.props.isGraphView && (\r\n                            <Button\r\n                              onClick={this.handleClickGraphButton}\r\n                              label='See it on graph'\r\n                              className='data-model-structure__graph-button'\r\n                              buttonType='secondary'\r\n                            />\r\n                          )\r\n                        }\r\n                      </React.Fragment>\r\n                    )\r\n                  }\r\n                  <div className='data-model-structure__node'>\r\n                    <IconSVG className='data-model-structure__icon' />\r\n                    <span className={`data-model-structure__node-name ${lastNodeModifier} introduction`}>{nodeID}</span>\r\n                  </div>\r\n                </React.Fragment>\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n        {\r\n          this.props.isGraphView && (\r\n            <React.Fragment>\r\n              <Button\r\n                onClick={this.handleClickOverlayPropertyButton}\r\n                label={this.props.overlayPropertyHidden ? 'Open properties' : 'Close properties'}\r\n                className='data-model-structure__table-button'\r\n                rightIcon='list'\r\n                buttonType='primary'\r\n              />\r\n              {\r\n                this.downloadTemplatesEnabled() && (\r\n                  <Dropdown\r\n                    className='data-model-structure__template-download-dropdown'\r\n                  >\r\n                    <Dropdown.Button>Download templates</Dropdown.Button>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        rightIcon='download'\r\n                        onClick={() => this.handleDownloadAllTemplates('tsv')}\r\n                      >\r\n                        TSV\r\n                      </Dropdown.Item>\r\n                      <Dropdown.Item\r\n                        rightIcon='download'\r\n                        onClick={() => this.handleDownloadAllTemplates('json')}\r\n                      >\r\n                        JSON\r\n                      </Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )\r\n              }\r\n            </React.Fragment>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDataModelStructure.propTypes = {\r\n  dataModelStructure: PropTypes.arrayOf(PropTypes.object),\r\n  isGraphView: PropTypes.bool,\r\n  onSetGraphView: PropTypes.func,\r\n  onSetOverlayPropertyTableHidden: PropTypes.func,\r\n  onResetGraphCanvas: PropTypes.func,\r\n  overlayPropertyHidden: PropTypes.bool,\r\n  downloadMultiTemplate: PropTypes.func,\r\n  excludedNodesForTemplates: PropTypes.arrayOf(PropTypes.string),\r\n  relatedNodeIDs: PropTypes.arrayOf(PropTypes.string),\r\n  allRoutes: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\r\n  clickingNodeName: PropTypes.string,\r\n  dictionaryVersion: PropTypes.string,\r\n};\r\n\r\nDataModelStructure.defaultProps = {\r\n  dataModelStructure: null,\r\n  isGraphView: true,\r\n  onSetGraphView: () => {},\r\n  onSetOverlayPropertyTableHidden: () => {},\r\n  onResetGraphCanvas: () => {},\r\n  overlayPropertyHidden: true,\r\n  downloadMultiTemplate,\r\n  excludedNodesForTemplates: ['program', 'project'],\r\n  relatedNodeIDs: [],\r\n  allRoutes: [],\r\n  clickingNodeName: '',\r\n  dictionaryVersion: 'Unknown',\r\n};\r\n\r\nexport default DataModelStructure;\r\n","import { connect } from 'react-redux';\r\nimport { setGraphView, setOverlayPropertyTableHidden, setNeedReset } from '../action.js';\r\nimport DataModelStructure from './DataModelStructure';\r\n\r\nconst ReduxDataModelStructure = (() => {\r\n  const mapStateToProps = state => ({\r\n    dataModelStructure: state.ddgraph.dataModelStructure,\r\n    isGraphView: state.ddgraph.isGraphView,\r\n    overlayPropertyHidden: state.ddgraph.overlayPropertyHidden,\r\n    relatedNodeIDs: state.ddgraph.dataModelStructureRelatedNodeIDs,\r\n    allRoutes: state.ddgraph.dataModelStructureAllRoutesBetween,\r\n    clickingNodeName: state.ddgraph.highlightingNode ? state.ddgraph.highlightingNode.label : '',\r\n    dictionaryVersion: state.versionInfo.dictionaryVersion,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onSetGraphView: isGraphView => dispatch(setGraphView(isGraphView)),\r\n    onSetOverlayPropertyTableHidden: hidden => dispatch(setOverlayPropertyTableHidden(hidden)),\r\n    onResetGraphCanvas: () => dispatch(setNeedReset(true)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(DataModelStructure);\r\n})();\r\n\r\nexport default ReduxDataModelStructure;\r\n","/**\r\n * Get subgroup links from link\r\n * @param {object} link - array of links\r\n * @param {object} nameToNode - key (node name) value (node object) map\r\n * @param {string} sourceId - source id for subgroup links\r\n * This function traverse links recursively and return all nested subgroup lnks\r\n */\r\nconst getSubgroupLinks = (link, nameToNode, sourceId) => {\r\n  let subgroupLinks = [];\r\n  if (link.subgroup) {\r\n    link.subgroup.forEach((sgLink) => {\r\n      if (sgLink.subgroup) {\r\n        subgroupLinks = subgroupLinks.concat(getSubgroupLinks(sgLink, nameToNode, sourceId));\r\n      } else {\r\n        subgroupLinks.push({\r\n          source: nameToNode[sourceId],\r\n          target: nameToNode[sgLink.target_type],\r\n          exists: 1,\r\n          ...sgLink,\r\n        });\r\n      }\r\n    });\r\n  }\r\n  return subgroupLinks;\r\n};\r\n\r\n/**\r\n * Given a data dictionary that defines a set of nodes\r\n *    and edges, returns the nodes and edges in correct format\r\n *\r\n * @method createNodesAndEdges\r\n * @param props: Object (normally taken from redux state) that includes dictionary\r\n *    property defining the dictionary as well as other optional properties\r\n *    such as counts_search and links_search (created by getCounts) with\r\n *    information about the number of each type (node) and link (between\r\n *    nodes with a link's source and target types) that actually\r\n *    exist in the data\r\n * @param createAll: Include all nodes and edges or only those that are populated in\r\n *    counts_search and links_search\r\n * @param nodesToHide: Array of nodes to hide from graph\r\n * @returns { nodes, edges } Object containing nodes and edges\r\n */\r\nexport function createNodesAndEdges(props, createAll, nodesToHide = ['program']) {\r\n  const dictionary = props.dictionary;\r\n  const nodes = Object.keys(dictionary).filter(\r\n    key => !key.startsWith('_') && dictionary[key].type === 'object'\r\n      && dictionary[key].category !== 'internal' && !nodesToHide.includes(key),\r\n  ).map(\r\n    (key) => {\r\n      let count = 0;\r\n      if (props.counts_search) {\r\n        count = props.counts_search[`_${key}_count`];\r\n      }\r\n      return {\r\n        name: dictionary[key].title,\r\n        count,\r\n        ...dictionary[key],\r\n      };\r\n    },\r\n  ).filter(\r\n    node => createAll || node.count !== 0,\r\n  );\r\n\r\n  const nameToNode = nodes.reduce((db, node) => { db[node.id] = node; return db; }, {});\r\n  const hideDb = nodesToHide.reduce((db, name) => { db[name] = true; return db; }, {});\r\n\r\n  const edges = nodes.filter(\r\n    node => node.links && node.links.length > 0,\r\n  )\r\n    .reduce( // add each node's links to the edge list\r\n      (list, node) => {\r\n        const newLinks = node.links.map(\r\n          link => ({ source: node, target: nameToNode[link.target_type], exists: 1, ...link }),\r\n        );\r\n        return list.concat(newLinks);\r\n      }, [])\r\n    .reduce( // add link subgroups to the edge list\r\n      (list, link) => {\r\n        let result = list;\r\n        if (link.target) { // \"subgroup\" link entries in dictionary are not links themselves ...\r\n          result.push(link);\r\n        }\r\n        if (link.subgroup) {\r\n          const sgLinks = getSubgroupLinks(link, nameToNode, link.source.id);\r\n          result = result.concat(sgLinks);\r\n        }\r\n        return result;\r\n      }, [])\r\n    .filter(\r\n    // target type exist and is not in hide list\r\n      link => (link.target && link.target.id in nameToNode && !(link.target.id in hideDb)))\r\n    .map(\r\n      (link) => {\r\n      // decorate each link with its \"exists\" count if available\r\n      //  (number of instances of link between source and target types in the data)\r\n        const res = link;\r\n        res.exists = props.links_search\r\n          ? props.links_search[`${res.source.id}_${res.name}_to_${res.target.id}_link`] :\r\n          undefined;\r\n        return res;\r\n      })\r\n    .filter(\r\n    // filter out if no instances of this link exists and createAll is not specified\r\n      link => createAll || link.exists || link.exists === undefined,\r\n    );\r\n  return {\r\n    nodes,\r\n    edges,\r\n  };\r\n}\r\n\r\n/**\r\n * Find the root of the given graph (no edges out)\r\n * @method findRoot\r\n * @param nodes\r\n * @param edges\r\n * @return {string} rootName or null if no root\r\n */\r\nexport function findRoot(nodes, edges) {\r\n  const couldBeRoot = edges.reduce(\r\n    (db, edge) => {\r\n      // At some point the d3 force layout converts\r\n      //   edge.source and edge.target into node references ...\r\n      const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\r\n      if (db[sourceName]) {\r\n        db[sourceName] = false;\r\n      }\r\n      return db;\r\n    },\r\n    // initialize emptyDb - any node could be the root\r\n    nodes.reduce((emptyDb, node) => { const res = emptyDb; res[node.id] = true; return res; }, {}),\r\n  );\r\n  const rootNode = nodes.find(n => couldBeRoot[n.id]);\r\n  return rootNode ? rootNode.id : null;\r\n}\r\n\r\n/**\r\n * Recursive helper function for getTreeHierarchy\r\n * Returns the hierarchy of the tree in the form of a map\r\n * Each (key, value) consists of (node, node's descendants including the node itself)\r\n * @method getTreeHierarchyHelper\r\n * @param root\r\n * @param name2EdgesIn\r\n * @param hierarchy\r\n * @return {map}\r\n */\r\nfunction getTreeHierarchyHelper(node, name2EdgesIn, hierarchy) {\r\n  const descendants = new Set();\r\n  descendants.add(node);\r\n  hierarchy.set(node, descendants);\r\n  name2EdgesIn[node].forEach((edge) => {\r\n    const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\r\n    if (!hierarchy.get(sourceName)) { // don't want to visit node again\r\n      hierarchy = getTreeHierarchyHelper(sourceName, name2EdgesIn, hierarchy);\r\n      descendants.add(sourceName);\r\n      hierarchy.get(sourceName).forEach((n) => {\r\n        descendants.add(n);\r\n      });\r\n    }\r\n  });\r\n  hierarchy.set(node, descendants);\r\n  return hierarchy;\r\n}\r\n\r\n/**\r\n * Returns the hierarchy of the tree in the form of a map\r\n * Each (key, value) consists of (node, node's descendants including the node itself)\r\n * @method getTreeHierarchy\r\n * @param root\r\n * @param name2EdgesIn\r\n * @return {map}\r\n */\r\nexport function getTreeHierarchy(root, name2EdgesIn) {\r\n  return getTreeHierarchyHelper(root, name2EdgesIn, new Map());\r\n}\r\n\r\n/**\r\n * Arrange nodes in dictionary graph breadth first, and build level database.\r\n * If a node links to multiple parents, then place it under the highest parent ...\r\n * Exported for testing.\r\n *\r\n * @param {Array} nodes\r\n * @param {Array} edges\r\n * @return { nodesBreadthFirst, treeLevel2Names, name2Level } where\r\n *          nodesBreadthFirst is array of node names, and\r\n *          treeLevel2Names is an array of arrays of node names,\r\n *          and name2Level is a mapping of node name to level\r\n */\r\nexport function nodesBreadthFirst(nodes, edges) {\r\n  const result = {\r\n    bfOrder: [],\r\n    treeLevel2Names: [],\r\n    name2Level: {},\r\n  };\r\n\r\n  // mapping of node name to edges that point into that node\r\n  const name2EdgesIn = edges.reduce(\r\n    (db, edge) => {\r\n      // At some point the d3 force layout converts edge.source\r\n      //   and edge.target into node references ...\r\n      const targetName = typeof edge.target === 'object' ? edge.target.id : edge.target;\r\n      if (db[targetName]) {\r\n        db[targetName].push(edge);\r\n      } else {\r\n        console.error(`Edge points to unknown node: ${targetName}`);\r\n      }\r\n      return db;\r\n    },\r\n    // initialize emptyDb - include nodes that have no incoming edges (leaves)\r\n    nodes.reduce((emptyDb, node) => { const res = emptyDb; res[node.id] = []; return res; }, {}),\r\n  );\r\n\r\n  // root node has no edges coming out of it, just edges coming in\r\n  const root = findRoot(nodes, edges);\r\n  if (!root) {\r\n    console.log('Could not find root of given graph');\r\n    return result;\r\n  }\r\n\r\n  const processedNodes = new Set(); // account for nodes that link to multiple other nodes\r\n  let queue = [];\r\n  queue.push({ query: root, level: 0 });\r\n\r\n  // just 2b safe - could be user gives us a graph without a 'project'\r\n  if (!name2EdgesIn[root]) {\r\n    name2EdgesIn[root] = [];\r\n  }\r\n\r\n  const name2ActualLvl = {};\r\n  const hierarchy = getTreeHierarchy(root, name2EdgesIn);\r\n  // Run through this once to determine the actual level of each node\r\n  for (let head = 0; head < queue.length; head += 1) {\r\n    const { query, level } = queue[head]; // breadth first\r\n    name2ActualLvl[query] = level;\r\n    // eslint-disable-next-line\r\n    name2EdgesIn[query].forEach((edge) => {\r\n      // At some point the d3 force layout converts edge.source\r\n      //   and edge.target into node references ...\r\n      const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\r\n      if (name2EdgesIn[sourceName]) {\r\n        const isAncestor = hierarchy.get(sourceName).has(query);\r\n        // only push node if it is not an ancestor of the current node, or else --> cycle\r\n        if (!isAncestor) {\r\n          queue.push({ query: sourceName, level: level + 1 });\r\n        }\r\n      } else {\r\n        console.log(`Edge comes from unknown node ${sourceName}`);\r\n      }\r\n    },\r\n    );\r\n  }\r\n\r\n  // Reset and run for real\r\n  // eslint-disable-next-line\r\n  queue = [];\r\n  queue.push({ query: root, level: 0 });\r\n\r\n  // queue.shift is O(n), so just keep pushing, and move the head\r\n  for (let head = 0; head < queue.length; head += 1) {\r\n    const { query, level } = queue[head]; // breadth first\r\n    result.bfOrder.push(query);\r\n    processedNodes.add(query);\r\n    if (result.treeLevel2Names.length <= level) {\r\n      result.treeLevel2Names.push([]);\r\n    }\r\n    result.treeLevel2Names[level].push(query);\r\n    result.name2Level[query] = level;\r\n    name2EdgesIn[query].forEach(\r\n      (edge) => {\r\n        // At some point the d3 force layout converts edge.source\r\n        //   and edge.target into node references ...\r\n        const sourceName = typeof edge.source === 'object' ? edge.source.id : edge.source;\r\n        if (name2EdgesIn[sourceName]) {\r\n          if (!processedNodes.has(sourceName) && name2ActualLvl[sourceName] === (level + 1)) {\r\n            //\r\n            // edge source has not yet been processed via another link from the source\r\n            // to a node higher in the graph\r\n            //\r\n            processedNodes.add(sourceName); // don't double-queue a node\r\n            queue.push({ query: sourceName, level: level + 1 });\r\n          }\r\n        } else {\r\n          console.log(`Edge comes from unknown node ${sourceName}`);\r\n        }\r\n      },\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\n\r\n/**\r\n * Decorate the nodes of a graph with a position based on the node's position in the graph\r\n * Exported for testing.  Decorates nodes with position property array [x,y] on a [0,1) space\r\n *\r\n * @method assignNodePositions\r\n * @param nodes\r\n * @param edges\r\n * @param opts {breadthFirstInfo,numPerRow} breadthFirstInfo is output\r\n *          from nodesBreadthFirst - otherwise call it ourselves,\r\n *          numPerRow specifies number of nodes per row if we want a\r\n *          grid under the root rather than the tree structure\r\n */\r\nexport function assignNodePositions(nodes, edges, opts) {\r\n  const breadthFirstInfo = (opts && opts.breadthFirstInfo) ?\r\n    opts.breadthFirstInfo : nodesBreadthFirst(nodes, edges);\r\n  const name2Node = nodes.reduce((db, node) => {\r\n    const res = db; res[node.id] = node; return res;\r\n  }, {});\r\n\r\n  // the tree has some number of levels with some number of nodes each,\r\n  // but we may want to break each level down into multiple rows\r\n  // @return {rowNumber:[nodeNameList]}\r\n  const row2Names = (() => {\r\n    if (!opts || !opts.numPerRow) {\r\n      return breadthFirstInfo.treeLevel2Names;\r\n    }\r\n    const { numPerRow } = opts;\r\n    const { bfOrder } = breadthFirstInfo;\r\n    // put the root on its own level\r\n    return bfOrder.reduce(\r\n      (db, node) => {\r\n        if (db.length < 2) { // put root node on its own level\r\n          db.push([node]);\r\n        } else {\r\n          const lastRow = db[db.length - 1];\r\n          if (lastRow.length < numPerRow) {\r\n            lastRow.push(node);\r\n          } else {\r\n            db.push([node]);\r\n          }\r\n        }\r\n        return db;\r\n      }, [],\r\n    );\r\n  })();\r\n\r\n  // Assign a (x,y) position in [0,1) space to each node based on its level in the tree\r\n  const numLevels = row2Names.length;\r\n  row2Names.forEach(\r\n    (nodesAtLevel, level) => {\r\n      const numNodesAtLevel = nodesAtLevel.length;\r\n      nodesAtLevel.forEach(\r\n        (nodeName, posAtLevel) => {\r\n          const node = name2Node[nodeName];\r\n          node.position = [ // (x,y) in [0,1) coordinates\r\n            (posAtLevel + 1) / (numNodesAtLevel + 1),\r\n            (level + 1) / (numLevels + 1),\r\n          ];\r\n          node.positionIndex = [\r\n            posAtLevel, level,\r\n          ];\r\n        });\r\n    },\r\n  );\r\n  return breadthFirstInfo;\r\n}\r\n\r\n/**\r\n * convert graph structure to string using DOT language\r\n * DOT Language ref: http://www.graphviz.org/doc/info/lang.html\r\n * @param {Array} nodes\r\n * @param {Array} edges\r\n * @params {Object} treeLevel2Names - levels and nodes in each level, {levelNum:[nodeNameList]}\r\n * @returns {string} graph translated into DOT language\r\n */\r\nconst buildGraphVizDOTString = (nodes, edges, treeLevel2Names) => {\r\n  const whRatio = 1;\r\n  const canvasSize = 5;\r\n  const nodeWidth = 1.2;\r\n  const nodeHeight = 0.8;\r\n  let graphString = 'digraph dictionary {\\n';\r\n  graphString += `size=\"${canvasSize}, ${canvasSize}\"\\n`;\r\n  graphString += `ratio=${whRatio}\\n`;\r\n  nodes.forEach((node) => {\r\n    graphString += `${node.id} [type=\"${node.category}\" \\\r\nlabel=\"${node.name}\" \\\r\nfixedsize=true width=${nodeWidth} height=${nodeHeight} \\\r\nshape=rectangle\r\n]\\n`;\r\n  });\r\n  edges.forEach((edge) => {\r\n    graphString += `${edge.source.id} -> ${edge.target.id}[arrowhead=none tailport=s ]\\n`;\r\n  });\r\n  if (treeLevel2Names) {\r\n    treeLevel2Names.forEach((IDsInThisLevel, i) => {\r\n      graphString += `{rank=${i} ${IDsInThisLevel.join(' ')}}\\n`;\r\n    });\r\n  }\r\n  graphString += '}';\r\n  return graphString;\r\n};\r\n\r\nexport function createDotStrinByNodesEdges(nodes, edges) {\r\n  const posInfo = assignNodePositions(nodes, edges);\r\n  const dotString = buildGraphVizDOTString(nodes, edges, posInfo.treeLevel2Names);\r\n  return dotString;\r\n}\r\n","/**\r\n * @typedef {Object} Node\r\n * @property {string} id - ID of this node\r\n * @property {string[]} inLinks - array of soure node IDs that link to this node\r\n * @property {string[]} outLinks - array of target node IDs that are linked from this node\r\n */\r\n\r\n/**\r\n * @typedef {Object} Edge\r\n * @property {string} source - edge source node ID\r\n * @property {string} target - edge target node ID\r\n */\r\n\r\n/**\r\n * Get all descendent node IDs from a given node\r\n * @param {string} startingNodeID\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of descendent node IDs\r\n */\r\nexport const getAllChildrenNodeIDs = (startingNodeID, wholeGraphNodes) => {\r\n  const relatedNodeIDs = [];\r\n  const startingNode = wholeGraphNodes.find(n => n.id === startingNodeID);\r\n  let currentLevelNodeIDs = startingNode.outLinks;\r\n  while (currentLevelNodeIDs && currentLevelNodeIDs.length > 0) {\r\n    const nextLevelNodeIDs = [];\r\n    currentLevelNodeIDs.forEach((nodeId) => {\r\n      if (relatedNodeIDs.includes(nodeId) || nextLevelNodeIDs.includes(nodeId)) return;\r\n      relatedNodeIDs.push(nodeId);\r\n      const originNode = wholeGraphNodes.find(n => (n.id === nodeId));\r\n      const nextLevel = originNode.outLinks;\r\n      nextLevel.forEach((outNodeId) => {\r\n        nextLevelNodeIDs.push(outNodeId);\r\n      });\r\n    });\r\n    currentLevelNodeIDs = nextLevelNodeIDs;\r\n  }\r\n  return relatedNodeIDs;\r\n};\r\n\r\n/**\r\n * Get all children links from a given node\r\n * @param {string} startingNodeID\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {Edge[]} array of descendent links\r\n */\r\nexport const getAllChildrenLinks = (startingNodeID, wholeGraphNodes) => {\r\n  const startingNode = wholeGraphNodes.find(n => n.id === startingNodeID);\r\n  let currentLevelNodeIDs = startingNode.outLinks;\r\n  const relatedLinks = currentLevelNodeIDs.map(outID => ({\r\n    source: startingNode.id,\r\n    target: outID,\r\n  }));\r\n  const sourceNodeHistory = {};\r\n  while (currentLevelNodeIDs.length > 0) {\r\n    const nextLevelNodeIDs = [];\r\n    for (let i = 0; i < currentLevelNodeIDs.length; i += 1) {\r\n      const nodeID = currentLevelNodeIDs[i];\r\n      if (sourceNodeHistory[nodeID]) continue; // eslint-disable-line no-continue\r\n      const originNode = wholeGraphNodes.find(n => (n.id === nodeID));\r\n      const nextLevel = originNode.outLinks;\r\n      for (let j = 0; j < nextLevel.length; j += 1) {\r\n        const outNodeID = nextLevel[j];\r\n        relatedLinks.push({\r\n          source: nodeID,\r\n          target: outNodeID,\r\n        });\r\n        sourceNodeHistory[nodeID] = true;\r\n        nextLevelNodeIDs.push(outNodeID);\r\n      }\r\n    }\r\n    currentLevelNodeIDs = nextLevelNodeIDs;\r\n  }\r\n  return relatedLinks;\r\n};\r\n\r\n/**\r\n * Get all inlinks or outlinks for a given node, in subgraph\r\n * @param {string} nodeID - ID of the given node\r\n * @param {boolean} inOrOut - true: get inlinks, false: get outlinks\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of node IDs that are inlinks or outlinks of the given node\r\n */\r\nconst inOrOutLinksFromGivenNode = (\r\n  nodeID,\r\n  inOrOut,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const node = wholeGraphNodes.find(n => n.id === nodeID);\r\n  const links = inOrOut ? node.inLinks : node.outLinks;\r\n  const inLinksFilterFunc = (e, neighborNodeID) => (e.target === nodeID\r\n    && e.source === neighborNodeID\r\n    && subgraphNodeIDs.includes(e.source));\r\n  const outLinksFilterFunc = (e, neighborNodeID) => (e.source === nodeID\r\n    && e.target === neighborNodeID\r\n    && subgraphNodeIDs.includes(e.target));\r\n  return links.filter(neighborNodeID => subgraphNodeIDs.includes(neighborNodeID))\r\n    .filter(neighborNodeID => subgraphEdges.find((e) => {\r\n      if (inOrOut) return inLinksFilterFunc(e, neighborNodeID);\r\n      return outLinksFilterFunc(e, neighborNodeID);\r\n    }))\r\n    .filter(neighborNodeID => (neighborNodeID !== nodeID));\r\n};\r\n\r\n/**\r\n * Inside a subgraph, get all nodes that have no inlinks or outlinks\r\n * (inlinks of a node means links that is pointing at this node)\r\n * (node without inlinks means no other nodes inside subgraph is pointing at it)\r\n * (outlinks of a node means links that is starting from this node)\r\n * (node without outlinks means this node is not pointing at any other nodes in subgraph)\r\n * @param {boolean} inOrOut - true: get inlinks, false: get outlinks\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of node IDs that have no inlinks or outlinks\r\n */\r\nexport const getNodeIDsThatHaveNoInOrOutLinks = (\r\n  inOrOut,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const resultIDs = [];\r\n  subgraphNodeIDs.forEach((nodeID) => {\r\n    const links = inOrOutLinksFromGivenNode(\r\n      nodeID,\r\n      inOrOut,\r\n      subgraphNodeIDs,\r\n      subgraphEdges,\r\n      wholeGraphNodes,\r\n    );\r\n    if (!links || links.length === 0) {\r\n      resultIDs.push(nodeID);\r\n    }\r\n  });\r\n  return resultIDs;\r\n};\r\n\r\n/**\r\n * Judge if a given node is articulation node inside subgraph\r\n * (An articulation node of a graph is a node whose removal will disconnect the graph)\r\n * @param {string} targetNodeID - the target node to validate\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {boolean} whether this node is articulation node inside subgraph\r\n */\r\nexport const isArticulationNodeInSubgraph = (\r\n  targetNodeID,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  // step.1: calculate connected node count if there's no target node in subgraph\r\n  const nodeIdsWithoutInLinks = getNodeIDsThatHaveNoInOrOutLinks(\r\n    true,\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  if (nodeIdsWithoutInLinks.includes(targetNodeID)) return false;\r\n  let currentLevelNodeIDs = nodeIdsWithoutInLinks;\r\n  const nodeIDsInSubgraphWithoutTargetNode = [];\r\n  while (currentLevelNodeIDs.length > 0) {\r\n    const nextLevelNodeIDs = [];\r\n    currentLevelNodeIDs.forEach((nodeID) => {\r\n      if (nodeIDsInSubgraphWithoutTargetNode.includes(nodeID)\r\n        || nextLevelNodeIDs.includes(nodeID)) return;\r\n      nodeIDsInSubgraphWithoutTargetNode.push(nodeID);\r\n      const node = wholeGraphNodes.find(n => n.id === nodeID);\r\n      const inNeighbors = node.inLinks\r\n        .filter(inNodeID => subgraphEdges.find(e => e.source === inNodeID && e.target === nodeID));\r\n      const outNeighbors = node.outLinks.filter(outNodeID =>\r\n        subgraphEdges.find(e => e.target === outNodeID && e.source === nodeID));\r\n      const neighborNodeIDs = [...inNeighbors, ...outNeighbors];\r\n      neighborNodeIDs\r\n        .filter(nid => subgraphNodeIDs.includes(nid))\r\n        .filter(nid => (nid !== targetNodeID))\r\n        .forEach((nid) => {\r\n          nextLevelNodeIDs.push(nid);\r\n        });\r\n    });\r\n    currentLevelNodeIDs = nextLevelNodeIDs;\r\n  }\r\n\r\n  // step.2: if node count equals subgraph's node count - 1, then not articulation node\r\n  return (nodeIDsInSubgraphWithoutTargetNode.length !== subgraphNodeIDs.length - 1);\r\n};\r\n\r\n/**\r\n * Get all articulation node is articulation inside subgraph\r\n * (An articulation node of a graph is a node whose removal will disconnect the graph)\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of articulation node IDs inside subgraph\r\n */\r\nexport const getArticulationNodesInSubgraph = (\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const articulationNodeIDs = [];\r\n  subgraphNodeIDs.forEach((nodeID) => {\r\n    if (isArticulationNodeInSubgraph(\r\n      nodeID,\r\n      subgraphNodeIDs,\r\n      subgraphEdges,\r\n      wholeGraphNodes,\r\n    )) {\r\n      articulationNodeIDs.push(nodeID);\r\n    }\r\n  });\r\n  return articulationNodeIDs;\r\n};\r\n\r\n/**\r\n * Traverse a subgraph via breath Breadth-first search algorithm\r\n * @param {boolean} alongLinkDirection - if want traverse from link direction\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of node IDs in BFS traverse\r\n * Note that this function only consider union of `subgraphNodeIDs` and `subgraphEdges`,\r\n * if a node is in `subgraphEdges` but not in `subgraphNodeIDs`, it'll be ignored.\r\n */\r\nexport const BFSTraverseSubgraph = (\r\n  alongLinkDirection,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  let currentLevelNodeIDs = getNodeIDsThatHaveNoInOrOutLinks(\r\n    alongLinkDirection,\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  const resultNodeIDs = [];\r\n  while (currentLevelNodeIDs.length > 0) {\r\n    const nextLevelNodeIDs = [];\r\n    for (let i = 0; i < currentLevelNodeIDs.length; i += 1) {\r\n      const nodeID = currentLevelNodeIDs[i];\r\n      if (!resultNodeIDs.includes(nodeID)) resultNodeIDs.push(nodeID);\r\n      const node = wholeGraphNodes.find(n => n.id === nodeID);\r\n      if (node) {\r\n        const links = alongLinkDirection ? node.outLinks : node.inLinks;\r\n        const linkNeighbors = links.filter((neighborNodeID) => {\r\n          if (!subgraphNodeIDs.includes(neighborNodeID)) return false;\r\n          if (alongLinkDirection) {\r\n            return subgraphEdges.find(e => e.source === nodeID && neighborNodeID === e.target);\r\n          }\r\n\r\n          return subgraphEdges.find(e => e.target === nodeID && neighborNodeID === e.source);\r\n        });\r\n        for (let j = 0; j < linkNeighbors.length; j += 1) {\r\n          const neighborNodeID = linkNeighbors[j];\r\n          if (!currentLevelNodeIDs.includes(neighborNodeID)\r\n            && !nextLevelNodeIDs.includes(neighborNodeID)) {\r\n            nextLevelNodeIDs.push(neighborNodeID);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    currentLevelNodeIDs = nextLevelNodeIDs;\r\n  }\r\n  return resultNodeIDs;\r\n};\r\n\r\n/**\r\n * Get topological sorting of an array of node inside subgraph\r\n * I.e., order nodes so that for each link A->B, A comes before B in the ordering\r\n * @param {string[]} nodeIDsToSort - array of node IDs to sort\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of node IDs in topological order\r\n */\r\nexport const sortNodesByTopology = (\r\n  nodeIDsToSort,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const graphBFSTraverse = BFSTraverseSubgraph(\r\n    true,\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  const sortedNodeIDs = graphBFSTraverse.filter(nodeID => nodeIDsToSort.includes(nodeID));\r\n  return sortedNodeIDs;\r\n};\r\n\r\n\r\n/**\r\n * Find a node that is descendent of all other nodes inside subgraph\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string} if find, return node ID, otherwise return null\r\n */\r\nexport const getSingleEndDescendentNodeID = (\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const nodeIDs = getNodeIDsThatHaveNoInOrOutLinks(\r\n    false,\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  if (nodeIDs.length === 1) return nodeIDs[0];\r\n  return null;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Summary\r\n * @property {string[]} nodeIDs - array of node IDs between two given nodes\r\n * @property {Edge[]} links - array of links between two given nodes\r\n */\r\n/**\r\n * Get summary of how many nodes and links are between given two nodes inside subgraph\r\n * I.e., nodes and links along the route between given two nodes\r\n * @param {string} startingNodeID\r\n * @param {string} endingNodeID\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Object[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {Summary}\r\n */\r\nexport const getNodesAndLinksSummaryBetweenNodesInSubgraph = (\r\n  startingNodeID,\r\n  endingNodeID,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const startingNode = wholeGraphNodes.find(node => node.id === startingNodeID);\r\n  const betweenNodeIDs = [];\r\n  const firstLevelOutNodeIDs = startingNode.outLinks.filter(outNodeID =>\r\n    subgraphEdges.find(e => e.source === startingNodeID && e.target === outNodeID));\r\n  let currentLevelNodeIDs = firstLevelOutNodeIDs;\r\n  const betweenLinks = firstLevelOutNodeIDs.map(outID => ({\r\n    source: startingNodeID,\r\n    target: outID,\r\n  }));\r\n  while (currentLevelNodeIDs.length > 0) {\r\n    const nextLevelNodeIDs = [];\r\n    currentLevelNodeIDs.forEach((nodeID) => {\r\n      if (betweenNodeIDs.includes(nodeID)\r\n        || nextLevelNodeIDs.includes(nodeID)\r\n        || nodeID === endingNodeID\r\n      ) return;\r\n      betweenNodeIDs.push(nodeID);\r\n      const node = wholeGraphNodes.find(n => (n.id === nodeID));\r\n      const outNOdeIDsInSubgraph = node.outLinks\r\n        .filter(outNodeID => subgraphNodeIDs.includes(outNodeID))\r\n        .filter(outNodeID => subgraphEdges.find(e =>\r\n          e.source === nodeID && e.target === outNodeID));\r\n      outNOdeIDsInSubgraph.forEach((outNodeID) => {\r\n        betweenLinks.push({\r\n          source: nodeID,\r\n          target: outNodeID,\r\n        });\r\n      });\r\n      outNOdeIDsInSubgraph\r\n        .filter(outNodeID => outNodeID !== endingNodeID)\r\n        .forEach((outNodeID) => {\r\n          nextLevelNodeIDs.push(outNodeID);\r\n        });\r\n    });\r\n    currentLevelNodeIDs = nextLevelNodeIDs;\r\n  }\r\n  const sortedBetweenNodeIDs = BFSTraverseSubgraph(\r\n    false,\r\n    betweenNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  return {\r\n    nodeIDs: sortedBetweenNodeIDs,\r\n    links: betweenLinks,\r\n  };\r\n};\r\n\r\nexport const getAllRoutesBetweenTwoNodes = (\r\n  startingNodeID,\r\n  endingNodeID,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  const resultRoutes = [];\r\n  const takeOneStep = (curID, curPath) => {\r\n    if (curID === endingNodeID) {\r\n      const resultPath = Array.from(curPath);\r\n      resultPath.reverse(); // we actually want route from top to bottom\r\n      resultRoutes.push(resultPath);\r\n      return;\r\n    }\r\n    const curNode = wholeGraphNodes.find(n => n.id === curID);\r\n    curNode.outLinks.forEach((oid) => {\r\n      if (curPath.has(oid)) return; // avoid loop\r\n      if (!subgraphNodeIDs.includes(oid)) return;\r\n      if (!subgraphEdges.find(e => e.target === oid && e.source === curID)) return;\r\n      curPath.add(oid);\r\n      takeOneStep(oid, curPath);\r\n      curPath.delete(oid);\r\n    });\r\n  };\r\n  takeOneStep(startingNodeID, new Set([startingNodeID]));\r\n  return resultRoutes;\r\n};\r\n\r\n","import Viz from 'viz.js';\r\nimport { Module, render } from 'viz.js/full.render';\r\nimport _ from 'underscore';\r\nimport { createNodesAndEdges, createDotStrinByNodesEdges } from '../../../GraphUtils/utils';\r\nimport {\r\n  truncateLines,\r\n  graphStyleConfig,\r\n} from '../../utils';\r\nimport {\r\n  getAllChildrenNodeIDs,\r\n  getAllChildrenLinks,\r\n  getArticulationNodesInSubgraph,\r\n  sortNodesByTopology,\r\n  getSingleEndDescendentNodeID,\r\n  getNodesAndLinksSummaryBetweenNodesInSubgraph,\r\n  getAllRoutesBetweenTwoNodes,\r\n} from './graphStructureHelper.js';\r\nimport { getCategoryColor } from '../../NodeCategories/helper';\r\n\r\n/**\r\n * Get a set of types from an array of nodes\r\n * @param {Node[]} nodes\r\n * @returns {string[]} array of type names(duplicating names removed) of given nodes\r\n */\r\nexport const getAllTypes = (nodes) => {\r\n  const types = nodes.map(node => node.type);\r\n  const uniqueTypes = _.uniq(types);\r\n  return uniqueTypes;\r\n};\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nexport const calculateGraphLayout = (dictionary, countsSearch, linksSearch) => {\r\n  const { nodes, edges } = createNodesAndEdges({\r\n    dictionary,\r\n    counts_search: countsSearch,\r\n    links_search: linksSearch,\r\n  }, true, []);\r\n  const dotString = createDotStrinByNodesEdges(nodes, edges);\r\n  const viz = new Viz({ Module, render });\r\n  return viz.renderJSONObject(dotString)\r\n    .then((renderedJSON) => {\r\n      //console.log(renderedJSON);\r\n      // draw nodes\r\n      const renderedNodes = renderedJSON.objects\r\n        .filter(n => !n.rank)\r\n        .map((n) => {\r\n          const boundingBox = n._draw_[1].points.reduce((acc, cur) => {\r\n            if (acc.x1 > cur[0]) acc.x1 = cur[0];\r\n            if (acc.y1 > cur[1]) acc.y1 = cur[1];\r\n            if (acc.x2 < cur[0]) acc.x2 = cur[0];\r\n            if (acc.y2 < cur[1]) acc.y2 = cur[1];\r\n            return acc;\r\n          }, {\r\n            x1: Infinity,\r\n            y1: Infinity,\r\n            x2: -Infinity,\r\n            y2: -Infinity,\r\n          });\r\n          const iconRadius = graphStyleConfig.nodeIconRadius;\r\n          const topCenterX = (boundingBox.x1 + boundingBox.x2) / 2;\r\n          const topCenterY = boundingBox.y1;\r\n          const width = boundingBox.x2 - boundingBox.x1;\r\n          const height = boundingBox.y2 - boundingBox.y1;\r\n          const originNode = nodes.find(node => node.id === n.name);\r\n          const outLinks = edges\r\n            .filter(edge => edge.source.id === n.name)\r\n            .map(edge => edge.target.id);\r\n          const inLinks = edges\r\n            .filter(edge => edge.target.id === n.name)\r\n            .map(edge => edge.source.id);\r\n\r\n          const nodeType = n.type.toLowerCase();\r\n          const nodeColor = getCategoryColor(nodeType);\r\n          const textPadding = graphStyleConfig.nodeContentPadding;\r\n          const fontSize = graphStyleConfig.nodeTextFontSize;\r\n          const textLineGap = graphStyleConfig.nodeTextLineGap;\r\n          const nodeNames = truncateLines(n.label);\r\n          const rectMinHeight = height;\r\n          const rectHeight = Math.max(\r\n            rectMinHeight,\r\n            (textPadding * 2) + (nodeNames.length * (fontSize + textLineGap)),\r\n          );\r\n          const requiredPropertiesCount = originNode.required ? originNode.required.length : 0;\r\n          const optionalPropertiesCount = originNode.properties ?\r\n            Object.keys(originNode.properties).length - requiredPropertiesCount : 0;\r\n          let nodeLevel = 0;\r\n          if (originNode && originNode.positionIndex && originNode.positionIndex.length >= 2) {\r\n            nodeLevel = originNode.positionIndex[1];\r\n          }\r\n          return {\r\n            id: n.name,\r\n            type: nodeType,\r\n            boundingBox,\r\n            topCenterX,\r\n            topCenterY,\r\n            width,\r\n            height: rectHeight,\r\n            color: nodeColor,\r\n            iconRadius,\r\n            textPadding,\r\n            fontSize,\r\n            textLineGap,\r\n            names: nodeNames,\r\n            label: n.label,\r\n            level: nodeLevel,\r\n            outLinks,\r\n            inLinks,\r\n            _gvid: n._gvid,\r\n            requiredPropertiesCount,\r\n            optionalPropertiesCount,\r\n          };\r\n        });\r\n\r\n      // draw edges\r\n      const renderedEdges = renderedJSON.edges\r\n        .map((edge) => {\r\n          const controlPoints = edge._draw_[1].points;\r\n          let pathString = `M${controlPoints[0].join(',')}C${controlPoints.slice(1)\r\n            .map(pair => `${pair[0]},${pair[1]}`).join(' ')}`;\r\n          const sourceNode = renderedNodes.find(node => node._gvid === edge.tail);\r\n          const targetNode = renderedNodes.find(node => node._gvid === edge.head);\r\n          if (sourceNode.level === targetNode.level + 1) {\r\n            const sourePosition = [\r\n              (sourceNode.boundingBox.x1 + sourceNode.boundingBox.x2) / 2,\r\n              sourceNode.boundingBox.y1,\r\n            ];\r\n            const targetPosition = [\r\n              (targetNode.boundingBox.x1 + targetNode.boundingBox.x2) / 2,\r\n              targetNode.boundingBox.y2,\r\n            ];\r\n            pathString = `M${sourePosition[0]} ${sourePosition[1]} \r\n              L ${targetPosition[0]} ${targetPosition[1]}`;\r\n          }\r\n          const required = edges\r\n            .find(e => (e.source.id === sourceNode.id && e.target.id === targetNode.id))\r\n            .required;\r\n          return {\r\n            source: sourceNode.id,\r\n            target: targetNode.id,\r\n            controlPoints,\r\n            pathString,\r\n            required,\r\n          };\r\n        });\r\n\r\n      // get bounding box for whole graph\r\n      const graphBoundingBox = renderedJSON._draw_.find(entry => entry.op === 'P').points;\r\n\r\n      const layoutResult = {\r\n        nodes: renderedNodes,\r\n        edges: renderedEdges,\r\n        graphBoundingBox,\r\n      };\r\n      return layoutResult;\r\n    })\r\n    .catch((e) => {\r\n      throw e;\r\n    });\r\n};\r\n/* eslint-enable no-underscore-dangle */\r\n\r\n/**\r\n * Get all node IDs that are descendent of the first highlighting node\r\n * @param {Node} highlightingNode - the first highlighting node\r\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {string[]} array of node IDs that are descendent of the first highlighting node\r\n */\r\nexport const calculateHighlightRelatedNodeIDs = (\r\n  highlightingNode,\r\n  wholeGraphNodes,\r\n) => {\r\n  if (!highlightingNode) {\r\n    return [];\r\n  }\r\n  const relatedNodeIDs = getAllChildrenNodeIDs(highlightingNode.id, wholeGraphNodes);\r\n  if (!relatedNodeIDs.includes(highlightingNode.id)) {\r\n    return [highlightingNode.id, ...relatedNodeIDs];\r\n  }\r\n  return relatedNodeIDs;\r\n};\r\n\r\n/**\r\n * Get all routes that pass the second highlighting node and ends at the first highlighting node\r\n * @param {Node} highlightingNode - the first highlighting node\r\n * @param {string} secondHighlightingNodeID - the second highlighting node ID\r\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {Edge[]} array of links along  routes that pass\r\n *                   the second and ends at the first highlighting node\r\n */\r\nexport const calculatePathRelatedToSecondHighlightingNode = (\r\n  highlightingNode,\r\n  secondHighlightingNodeID,\r\n  wholeGraphNodes,\r\n) => {\r\n  if (!highlightingNode || !secondHighlightingNodeID) {\r\n    return [];\r\n  }\r\n  const pathRelatedToSecondHighlightingNode = getAllChildrenLinks(\r\n    secondHighlightingNodeID,\r\n    wholeGraphNodes,\r\n  );\r\n  pathRelatedToSecondHighlightingNode.push({\r\n    source: highlightingNode.id,\r\n    target: secondHighlightingNodeID,\r\n  });\r\n  return pathRelatedToSecondHighlightingNode;\r\n};\r\n\r\n/**\r\n * For a given node in subgraph, summary about how do its descendent structure look like.\r\n * I.e., which nodes along the descendent structure, and how many nodes/links between.\r\n * (A node's descendent structure means nodes and links that are started from this node)\r\n * @param {Node} startingNode\r\n * @param {string[]} subgraphNodeIDs - array of node IDs in subgraph\r\n * @param {Edge[]} subgraphEdges - array of edges in subgraph\r\n * @param {Node[]} wholeGraphNodes - array of nodes in the origin whole graph\r\n * @returns {Object[]} array of ordered items, each refers to a descendent node,\r\n *                     its category, nodes and links between this item and previous item\r\n * Calculating process:\r\n *    step.1: find all critical nodes in subgraph\r\n             (critical nodes here means all articulation nodes in subgraph and the starting node)\r\n *    step.2: sort those nodes by linking order (source nodes come before target node)\r\n *    step.3: if there's a single node that is also descendent to all other node, add it to list\r\n *    step.4: for all nodes in critical node list, get summary description for all pairs\r\n *           of neighbor nodes (summary description means how many nodes and links between)\r\n *    step.4.1 (optional): if there isn't a single descendent node, get summary description\r\n *           for all of the rest nodes\r\n *    step.5: if there is a single descendent node, get all routes between this node and\r\n *           the starting Node\r\n *    step.6: return final data model structure\r\n */\r\nexport const calculateDataModelStructure = (\r\n  startingNode,\r\n  subgraphNodeIDs,\r\n  subgraphEdges,\r\n  wholeGraphNodes,\r\n) => {\r\n  if (!startingNode) return null;\r\n  const startingNodeID = startingNode.id;\r\n  // step.1\r\n  const articulationNodeIDs = getArticulationNodesInSubgraph(\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  const unsortedCriticalNodeIDs = articulationNodeIDs.includes(startingNodeID)\r\n    ? articulationNodeIDs : [...articulationNodeIDs, startingNodeID];\r\n  if (!unsortedCriticalNodeIDs || unsortedCriticalNodeIDs.length === 0) return null;\r\n\r\n  // step.2\r\n  const sortedCriticalNodeIDs = sortNodesByTopology(\r\n    unsortedCriticalNodeIDs,\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  if (!sortedCriticalNodeIDs || sortedCriticalNodeIDs.length === 0) { // loop in graph\r\n    return null;\r\n  }\r\n  const resultCriticalNodeIDs = sortedCriticalNodeIDs;\r\n\r\n  // step.3 if there's a single end descendent node\r\n  const singleDescendentNodeID = getSingleEndDescendentNodeID(\r\n    subgraphNodeIDs,\r\n    subgraphEdges,\r\n    wholeGraphNodes,\r\n  );\r\n  // add single descendent node if not counted in critical nodes list\r\n  if (singleDescendentNodeID && !resultCriticalNodeIDs.includes(singleDescendentNodeID)) {\r\n    resultCriticalNodeIDs.push(singleDescendentNodeID);\r\n  }\r\n\r\n  // step.4\r\n  let resultStructure = [];\r\n  for (let i = 1; i < resultCriticalNodeIDs.length; i += 1) {\r\n    const { nodeIDs, links } = getNodesAndLinksSummaryBetweenNodesInSubgraph(\r\n      resultCriticalNodeIDs[i - 1],\r\n      resultCriticalNodeIDs[i],\r\n      subgraphNodeIDs,\r\n      subgraphEdges,\r\n      wholeGraphNodes,\r\n    );\r\n    resultStructure.push({\r\n      nodeID: resultCriticalNodeIDs[i - 1],\r\n      nodeIDsBefore: nodeIDs,\r\n      linksBefore: links,\r\n    });\r\n  }\r\n\r\n  let routesBetweenStartEndNodes = [];\r\n  if (singleDescendentNodeID) {\r\n    resultStructure.push({\r\n      nodeID: singleDescendentNodeID,\r\n      nodeIDsBefore: [],\r\n      linksBefore: [],\r\n    });\r\n    // step.5 get all routes between the starting node and this single descendent node\r\n    routesBetweenStartEndNodes = getAllRoutesBetweenTwoNodes(\r\n      startingNodeID,\r\n      singleDescendentNodeID,\r\n      subgraphNodeIDs,\r\n      subgraphEdges,\r\n      wholeGraphNodes,\r\n    );\r\n  } else {\r\n    // step.4.1 (optional)\r\n    // Summary for all rest descendent nodes after last critical node\r\n    // (normally we won't need this step, because there should be only one single last\r\n    // descendent node (root note) \"program\", just in case that more than one appear in graph)\r\n    const lastCriticalNodeID = resultCriticalNodeIDs[resultCriticalNodeIDs.length - 1];\r\n    const nodeIDsBeforeNode = getAllChildrenNodeIDs(\r\n      lastCriticalNodeID,\r\n      wholeGraphNodes,\r\n    );\r\n    const linksBeforeNode = getAllChildrenLinks(\r\n      lastCriticalNodeID,\r\n      wholeGraphNodes,\r\n    );\r\n    resultStructure.push({\r\n      nodeID: lastCriticalNodeID,\r\n      nodeIDsBefore: nodeIDsBeforeNode,\r\n      linksBefore: linksBeforeNode,\r\n    });\r\n\r\n    // step.5.1 (optional)\r\n    // Get all routes between the starting node and the all rest descendent nodes\r\n    // (normally we won't need this step, because there should be only one single last\r\n    // descendent node (root note) \"program\", just in case that more than one appear in graph)\r\n    nodeIDsBeforeNode.forEach((nid) => {\r\n      routesBetweenStartEndNodes = routesBetweenStartEndNodes.concat(getAllRoutesBetweenTwoNodes(\r\n        startingNodeID,\r\n        nid,\r\n        subgraphNodeIDs,\r\n        subgraphEdges,\r\n        wholeGraphNodes,\r\n      ));\r\n    });\r\n  }\r\n\r\n  // step.6\r\n  resultStructure = resultStructure.map((entry) => {\r\n    const { nodeID, nodeIDsBefore, linksBefore } = entry;\r\n    const category = wholeGraphNodes.find(n => n.id === nodeID).type;\r\n    return {\r\n      nodeID,\r\n      nodeIDsBefore,\r\n      linksBefore,\r\n      category,\r\n    };\r\n  }).reverse();\r\n  return {\r\n    dataModelStructure: resultStructure,\r\n    routesBetweenStartEndNodes,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  getAllTypes,\r\n  calculateGraphLayout,\r\n  calculatePathRelatedToSecondHighlightingNode,\r\n  calculateHighlightRelatedNodeIDs,\r\n  calculateDataModelStructure,\r\n} from './graphCalculatorHelper';\r\n\r\nclass GraphCalculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.oldHighlightingNode = null;\r\n    this.oldSecondHighlightingNodeID = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.layoutInitialized) {\r\n      calculateGraphLayout(\r\n        this.props.dictionary,\r\n        this.props.countsSearch,\r\n        this.props.linksSearch,\r\n      ).then((layoutResult) => {\r\n        this.props.onGraphLayoutCalculated(layoutResult);\r\n        const legendItems = getAllTypes(layoutResult.nodes);\r\n        this.props.onGraphLegendCalculated(legendItems);\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUpdate(nextProps) {\r\n    // if the highlighted node is updated, calculate related highlighted nodes\r\n    const newHighlightingNode = nextProps.highlightingNode;\r\n    const newSecondHighlightingNodeID = nextProps.secondHighlightingNodeID;\r\n    if (this.oldHighlightingNode !== newHighlightingNode) {\r\n      const relatedHighlightedNodeIDs = calculateHighlightRelatedNodeIDs(\r\n        newHighlightingNode,\r\n        this.props.nodes,\r\n      );\r\n      this.props.onHighlightRelatedNodesCalculated(relatedHighlightedNodeIDs);\r\n      const secondHighlightingNodeCandidateIDs = newHighlightingNode\r\n        ? newHighlightingNode.outLinks : [];\r\n      this.props.onSecondHighlightingNodeCandidateIDsCalculated(secondHighlightingNodeCandidateIDs);\r\n    }\r\n\r\n    // if the second highlighting node is updated, calculate related highlighting nodes\r\n    if (this.oldSecondHighlightingNodeID !== newSecondHighlightingNodeID) {\r\n      const pathRelatedToSecondHighlightingNode = calculatePathRelatedToSecondHighlightingNode(\r\n        newHighlightingNode,\r\n        newSecondHighlightingNodeID,\r\n        this.props.nodes,\r\n      );\r\n      this.props.onPathRelatedToSecondHighlightingNodeCalculated(\r\n        pathRelatedToSecondHighlightingNode);\r\n    }\r\n\r\n    // update data model structure if update highlighting/secondHighlighting node\r\n    if (this.oldHighlightingNode !== newHighlightingNode\r\n      || this.oldSecondHighlightingNodeID !== newSecondHighlightingNodeID\r\n    ) {\r\n      if (newSecondHighlightingNodeID) {\r\n        const {\r\n          dataModelStructure,\r\n          dataModelStructureRelatedNodeIDs,\r\n          routesBetweenStartEndNodes,\r\n        } = this.getDataModelStructureForSecondHighlightingNodes(\r\n          newHighlightingNode,\r\n          newSecondHighlightingNodeID,\r\n        );\r\n        this.props.onDataModelStructureCalculated(\r\n          dataModelStructure,\r\n          dataModelStructureRelatedNodeIDs,\r\n          routesBetweenStartEndNodes,\r\n        );\r\n      } else {\r\n        this.props.onDataModelStructureCalculated(null);\r\n      }\r\n    }\r\n\r\n    this.oldHighlightingNode = newHighlightingNode;\r\n    this.oldSecondHighlightingNodeID = newSecondHighlightingNodeID;\r\n  }\r\n\r\n  getDataModelStructureForHighlightedNodes(newHighlightingNode) {\r\n    const relatedHighlightedNodeIDs = calculateHighlightRelatedNodeIDs(\r\n      newHighlightingNode,\r\n      this.props.nodes,\r\n    );\r\n    const subgraphEdges = this.props.edges\r\n      .filter(e => (relatedHighlightedNodeIDs.includes(e.source)\r\n        && relatedHighlightedNodeIDs.includes(e.target)))\r\n      .map(e => ({ source: e.source, target: e.target }));\r\n    const {\r\n      dataModelStructure,\r\n      routesBetweenStartEndNodes,\r\n    } = calculateDataModelStructure(\r\n      newHighlightingNode,\r\n      relatedHighlightedNodeIDs,\r\n      subgraphEdges,\r\n      this.props.nodes,\r\n    );\r\n    return {\r\n      dataModelStructure,\r\n      dataModelStructureRelatedNodeIDs: relatedHighlightedNodeIDs,\r\n      routesBetweenStartEndNodes,\r\n    };\r\n  }\r\n\r\n  getDataModelStructureForSecondHighlightingNodes(\r\n    newHighlightingNode,\r\n    newSecondHighlightingNodeID,\r\n  ) {\r\n    const subgraphNodeIDs = [];\r\n    const pathRelatedToSecondHighlightingNode = calculatePathRelatedToSecondHighlightingNode(\r\n      newHighlightingNode,\r\n      newSecondHighlightingNodeID,\r\n      this.props.nodes,\r\n    );\r\n    pathRelatedToSecondHighlightingNode.forEach((e) => {\r\n      if (!subgraphNodeIDs.includes(e.source)) subgraphNodeIDs.push(e.source);\r\n      if (!subgraphNodeIDs.includes(e.target)) subgraphNodeIDs.push(e.target);\r\n    });\r\n    const {\r\n      dataModelStructure,\r\n      routesBetweenStartEndNodes,\r\n    } = calculateDataModelStructure(\r\n      newHighlightingNode,\r\n      subgraphNodeIDs,\r\n      pathRelatedToSecondHighlightingNode,\r\n      this.props.nodes,\r\n    );\r\n    return {\r\n      dataModelStructure,\r\n      dataModelStructureRelatedNodeIDs: subgraphNodeIDs,\r\n      routesBetweenStartEndNodes,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (<React.Fragment />);\r\n  }\r\n}\r\n\r\nGraphCalculator.propTypes = {\r\n  dictionary: PropTypes.object,\r\n  countsSearch: PropTypes.array,\r\n  linksSearch: PropTypes.array,\r\n  onGraphLayoutCalculated: PropTypes.func,\r\n  onGraphLegendCalculated: PropTypes.func,\r\n  nodes: PropTypes.arrayOf(PropTypes.object),\r\n  edges: PropTypes.arrayOf(PropTypes.object),\r\n  highlightingNode: PropTypes.object,\r\n  onHighlightRelatedNodesCalculated: PropTypes.func,\r\n  onSecondHighlightingNodeCandidateIDsCalculated: PropTypes.func,\r\n  secondHighlightingNodeID: PropTypes.string,\r\n  onPathRelatedToSecondHighlightingNodeCalculated: PropTypes.func,\r\n  onDataModelStructureCalculated: PropTypes.func,\r\n  layoutInitialized: PropTypes.bool,\r\n};\r\n\r\nGraphCalculator.defaultProps = {\r\n  dictionary: {},\r\n  countsSearch: [],\r\n  linksSearch: [],\r\n  onGraphLayoutCalculated: () => {},\r\n  onGraphLegendCalculated: () => {},\r\n  highlightingNode: null,\r\n  nodes: [],\r\n  edges: [],\r\n  onHighlightRelatedNodesCalculated: () => {},\r\n  secondHighlightingNodeID: null,\r\n  onSecondHighlightingNodeCandidateIDsCalculated: () => {},\r\n  onPathRelatedToSecondHighlightingNodeCalculated: () => {},\r\n  onDataModelStructureCalculated: () => {},\r\n  layoutInitialized: false,\r\n};\r\n\r\nexport default GraphCalculator;\r\n","import { connect } from 'react-redux';\r\nimport GraphCalculator from './GraphCalculator';\r\nimport {\r\n  setGraphLayout,\r\n  setGraphLegend,\r\n  setRelatedNodeIDs,\r\n  setSecondHighlightingNodeCandidateIDs,\r\n  setPathRelatedToSecondHighlightingNode,\r\n  setDataModelStructure,\r\n} from '../../action';\r\n\r\nconst ReduxGraphCalculator = (() => {\r\n  const mapStateToProps = state => ({\r\n    dictionary: state.submission.dictionary,\r\n    countsSearch: state.submission.counts_search,\r\n    linksSearch: state.submission.links_search,\r\n    highlightingNode: state.ddgraph.highlightingNode,\r\n    nodes: state.ddgraph.nodes,\r\n    edges: state.ddgraph.edges,\r\n    secondHighlightingNodeID: state.ddgraph.secondHighlightingNodeID,\r\n    layoutInitialized: state.ddgraph.layoutInitialized,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onGraphLayoutCalculated: layout => dispatch(setGraphLayout(layout)),\r\n    onGraphLegendCalculated: legendItems => dispatch(setGraphLegend(legendItems)),\r\n    onHighlightRelatedNodesCalculated: relatedNodeIDs =>\r\n      dispatch(setRelatedNodeIDs(relatedNodeIDs)),\r\n    onSecondHighlightingNodeCandidateIDsCalculated: secondHighlightingNodeCandidateIDs =>\r\n      dispatch(setSecondHighlightingNodeCandidateIDs(secondHighlightingNodeCandidateIDs)),\r\n    onPathRelatedToSecondHighlightingNodeCalculated: pathRelatedToSecondHighlightingNode =>\r\n      dispatch(setPathRelatedToSecondHighlightingNode(pathRelatedToSecondHighlightingNode)),\r\n    onDataModelStructureCalculated: (\r\n      dataModelStructure,\r\n      dataModelStructureRelatedNodeIDs,\r\n      routesBetweenStartEndNodes,\r\n    ) =>\r\n      dispatch(setDataModelStructure(\r\n        dataModelStructure,\r\n        dataModelStructureRelatedNodeIDs,\r\n        routesBetweenStartEndNodes,\r\n      )),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(GraphCalculator);\r\n})();\r\n\r\nexport default ReduxGraphCalculator;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { capitalizeFirstLetter } from '../../../utils';\r\nimport { getCategoryIconSVG, getCategoryColor } from '../../NodeCategories/helper';\r\nimport './Legend.css';\r\n\r\nclass Legend extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: true,\r\n    };\r\n  }\r\n\r\n  toggleLegend = () => {\r\n    this.setState(state => ({\r\n      show: !state.show,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={`data-dictionary-graph-legend ${this.state.show ? '' : 'data-dictionary-graph-legend--toggled'}`}>\r\n        {\r\n          this.state.show ?\r\n            (\r\n              <React.Fragment>\r\n                <i\r\n                  className='data-dictionary-graph-legend__close g3-icon g3-icon--cross'\r\n                  onClick={this.toggleLegend}\r\n                  onKeyPress={this.toggleLegend}\r\n                  role='button'\r\n                  tabIndex={0}\r\n                />\r\n                <div className='data-dictionary-graph-legend__item body'>\r\n                  <i className='data-dictionary-graph-legend__required-icon data-dictionary-graph-legend__required-icon g3-icon g3-icon--minus' />\r\n                  <span className='data-dictionary-graph-legend__text'>Relationships</span>\r\n                </div>\r\n                {\r\n                  this.props.items.map((category) => {\r\n                    const itemColor = getCategoryColor(category);\r\n                    const IconSvg = getCategoryIconSVG(category);\r\n                    return (\r\n                      <div\r\n                        key={category}\r\n                        className='data-dictionary-graph-legend__item body'\r\n                      >\r\n                        <span className='data-dictionary-graph-legend__circle-wrapper'>\r\n                          {\r\n                            IconSvg ? <IconSvg /> : (\r\n                              <span\r\n                                className='data-dictionary-graph-legend__circle'\r\n                                style={{ backgroundColor: itemColor }}\r\n                              />\r\n                            )\r\n                          }\r\n                        </span>\r\n                        <span className='data-dictionary-graph-legend__text'>{capitalizeFirstLetter(category)}</span>\r\n                      </div>\r\n                    );\r\n                  })\r\n                }\r\n              </React.Fragment>\r\n            )\r\n            : (\r\n              <span\r\n                className='data-dictionary-graph-legend__info'\r\n                onClick={this.toggleLegend}\r\n                onKeyPress={this.toggleLegend}\r\n                role='button'\r\n                tabIndex={0}\r\n              >\r\n                <i className='data-dictionary-graph-legend__info-icon g3-icon g3-icon--question-mark' />\r\n              </span>\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLegend.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nLegend.defaultProps = {\r\n  items: [],\r\n};\r\n\r\nexport default Legend;\r\n","import { connect } from 'react-redux';\r\nimport Legend from './Legend';\r\n\r\nconst ReduxLegend = (() => {\r\n  const mapStateToProps = state => ({\r\n    items: state.ddgraph.legendItems,\r\n  });\r\n\r\n  return connect(mapStateToProps)(Legend);\r\n})();\r\n\r\nexport default ReduxLegend;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { select, event } from 'd3-selection';\r\nimport { transition } from 'd3-transition';\r\nimport { easeLinear } from 'd3-ease';\r\nimport { zoom, zoomTransform, zoomIdentity } from 'd3-zoom';\r\n\r\nimport './Canvas.css';\r\n\r\nconst d3 = {\r\n  select,\r\n  zoom,\r\n  zoomTransform,\r\n  zoomIdentity,\r\n  transition,\r\n  easeLinear,\r\n  get event() { return event; }, // https://stackoverflow.com/a/40048292\r\n};\r\n\r\nclass Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      canvasWidth: 0,\r\n      canvasHeight: 0,\r\n    };\r\n    this.canvasElement = React.createRef();\r\n    this.svgElement = React.createRef();\r\n    this.containerElement = React.createRef();\r\n    this.transition = d3.transition()\r\n      .duration(150)\r\n      .ease(d3.easeLinear);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.zoomBehavior = d3.zoom()\r\n      .scaleExtent([this.props.minZoom, this.props.maxZoom])\r\n      .translateExtent([this.props.topLeftTranslateLimit, this.props.bottomRightTranslateLimit])\r\n      .on('zoom', () => {\r\n        this.handleCanvasUpdate();\r\n        this.zoomTarget\r\n          .attr('transform', d3.event.transform);\r\n      });\r\n    this.zoomTarget = d3.select('.canvas__container');\r\n    this.zoomCatcher = d3.select('.canvas__overlay')\r\n      .style('fill', 'none')\r\n      .style('pointer-events', 'all')\r\n      .call(this.zoomBehavior);\r\n    this.updateCanvasSize();\r\n    window.addEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.needReset) {\r\n      this.handleReset();\r\n      this.props.onResetCanvasFinished();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    d3.select('.canvas__overlay')\r\n      .on('.zoom', null);\r\n    window.removeEventListener('resize', this.handleResize);\r\n  }\r\n\r\n  handleResize = () => {\r\n    if (this.props.isGraphView) {\r\n      this.updateCanvasSize();\r\n    }\r\n  }\r\n\r\n  updateCanvasSize() {\r\n    this.setState({\r\n      canvasWidth: this.canvasElement.current.clientWidth,\r\n      canvasHeight: this.canvasElement.current.clientHeight,\r\n    });\r\n    this.handleCanvasUpdate();\r\n  }\r\n\r\n  handleCanvasUpdate = () => {\r\n    const canvasBoundingRect = this.canvasElement.current.getBoundingClientRect();\r\n    this.props.onCanvasBoundingBoxUpdate(canvasBoundingRect);\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.props.onClickBlankSpace();\r\n  }\r\n\r\n  zoomAction = (k) => {\r\n    const transform = d3.zoomTransform(this.zoomCatcher.node());\r\n\r\n    // if zoomin (k>1), translate toward negative direction, if zoomout, toward positive\r\n    const translateSign = k > 1 ? -1 : +1;\r\n\r\n    this.zoomCatcher\r\n      .transition(this.transition)\r\n      .call(\r\n        this.zoomBehavior.transform,\r\n        transform\r\n          .translate(\r\n            translateSign * (this.state.canvasWidth / 2) * Math.abs(k - 1),\r\n            translateSign * (this.state.canvasHeight / 2) * Math.abs(k - 1),\r\n          )\r\n          .scale(k),\r\n      );\r\n  }\r\n\r\n  handleZoomIn = () => {\r\n    this.zoomAction(1.2);\r\n  }\r\n\r\n  handleZoomOut = () => {\r\n    this.zoomAction(0.8);\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.zoomCatcher\r\n      .transition(this.transition)\r\n      .call(this.zoomBehavior.transform, d3.zoomIdentity);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='canvas' ref={this.canvasElement} style={{ width: '100%', height: '100%' }}>\r\n        <div className='canvas__zoom-button-group'>\r\n          <div\r\n            className='canvas__zoom-button canvas__zoom-button--reset'\r\n            onClick={this.handleReset}\r\n            onKeyPress={this.handleReset}\r\n            role='button'\r\n            tabIndex={-1}\r\n          >\r\n            <i className='canvas__zoom-icon g3-icon g3-icon--reset' />\r\n          </div>\r\n          <div\r\n            className='canvas__zoom-button canvas__zoom-button--zoom-in'\r\n            onClick={this.handleZoomIn}\r\n            onKeyPress={this.handleZoomIn}\r\n            role='button'\r\n            tabIndex={-1}\r\n          >\r\n            <i className='canvas__zoom-icon g3-icon g3-icon--plus' />\r\n          </div>\r\n          <div\r\n            className='canvas__zoom-button canvas__zoom-button--zoom-out'\r\n            onClick={this.handleZoomOut}\r\n            onKeyPress={this.handleZoomOut}\r\n            role='button'\r\n            tabIndex={-1}\r\n          >\r\n            <i className='canvas__zoom-icon canvas__zoom-icon--zoom-in g3-icon g3-icon--minus' />\r\n          </div>\r\n        </div>\r\n        <svg\r\n          className='canvas__svg'\r\n          ref={this.svgElement}\r\n          width={this.state.canvasWidth}\r\n          height={this.state.canvasHeight}\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <defs>\r\n            <marker id=\"markerArrow\" markerWidth=\"20\" markerHeight=\"20\" refX=\"0\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\r\n            <path d=\"M0,0 L0,6 L9,3 z\" fill=\"black\" />\r\n            </marker>\r\n              </defs>\r\n  \r\n\r\n          <rect\r\n            \r\n            className='canvas__overlay'\r\n            width={this.state.canvasWidth}\r\n            height={this.state.canvasHeight}\r\n            onClick={this.handleClick}\r\n          />\r\n          <g\r\n            className='canvas__container'\r\n            ref={this.containerElement}\r\n          >\r\n            {\r\n              React.Children.map(this.props.children, child => React.cloneElement(child, {\r\n                canvasWidth: this.state.canvasWidth,\r\n                canvasHeight: this.state.canvasHeight,\r\n              }),\r\n              )\r\n            }\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCanvas.propTypes = {\r\n  minZoom: PropTypes.number,\r\n  maxZoom: PropTypes.number,\r\n  topLeftTranslateLimit: PropTypes.arrayOf(PropTypes.number),\r\n  bottomRightTranslateLimit: PropTypes.arrayOf(PropTypes.number),\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]).isRequired,\r\n  onClickBlankSpace: PropTypes.func,\r\n  onCanvasBoundingBoxUpdate: PropTypes.func,\r\n  isGraphView: PropTypes.bool,\r\n  needReset: PropTypes.bool,\r\n  onResetCanvasFinished: PropTypes.func,\r\n};\r\n\r\nCanvas.defaultProps = {\r\n  minZoom: 0.1,\r\n  maxZoom: 10,\r\n  topLeftTranslateLimit: [-Infinity, -Infinity],\r\n  bottomRightTranslateLimit: [+Infinity, +Infinity],\r\n  onClickBlankSpace: () => {},\r\n  onCanvasBoundingBoxUpdate: () => {},\r\n  isGraphView: true,\r\n  needReset: false,\r\n  onResetCanvasFinished: () => {},\r\n};\r\n\r\nexport default Canvas;\r\n","import { connect } from 'react-redux';\r\nimport { clickBlankSpace, setCanvasBoundingRect, setNeedReset } from '../../action';\r\nimport Canvas from './Canvas';\r\n\r\nconst ReduxCanvas = (() => {\r\n  const mapStateToProps = state => ({\r\n    isGraphView: state.ddgraph.isGraphView,\r\n    needReset: state.ddgraph.needReset,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onClickBlankSpace: () => dispatch(clickBlankSpace()),\r\n    onCanvasBoundingBoxUpdate:\r\n      canvasBoundingRect => dispatch(setCanvasBoundingRect(canvasBoundingRect)),\r\n    onResetCanvasFinished: () => dispatch(setNeedReset(false)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(Canvas);\r\n})();\r\n\r\nexport default ReduxCanvas;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getCategoryIconSVG } from '../../NodeCategories/helper';\r\nimport { MatchedIndicesShape } from '../../utils';\r\nimport { getNodeTitleSVGFragment } from '../../highlightHelper';\r\nimport './GraphNode.css';\r\n\r\nclass GraphNode extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.svgElement = React.createRef();\r\n  }\r\n\r\n  getSVGElement() {\r\n    return this.svgElement.current;\r\n  }\r\n\r\n  render() {\r\n    if (!(this.props.node.id !== undefined && this.props.node.type !== undefined\r\n      && this.props.node.textPadding !== undefined && this.props.node.topCenterX !== undefined\r\n      && this.props.node.topCenterY !== undefined && this.props.node.width !== undefined\r\n      && this.props.node.height !== undefined && this.props.node.color !== undefined\r\n      && this.props.node.names !== undefined && this.props.node.iconRadius !== undefined)\r\n      && this.props.node.textLineGap !== undefined && this.props.node.fontSize !== undefined) {\r\n      return null;\r\n    }\r\n    const nodeFadedClassModifier = this.props.isFaded\r\n      ? 'graph-node--faded' : '';\r\n    const nodeHalfFadedClassModifier = this.props.isHalfFaded\r\n      ? 'graph-node--half-faded' : '';\r\n    const nodeDashedClassModifier = this.props.isDashed\r\n      ? 'graph-node--dashed' : '';\r\n    const nodeClickableClassModifier = this.props.isClickable\r\n      ? 'graph-node--clickable' : 'graph-node--not-clickable';\r\n    const nodeIsCurrentHighlightingClassModifier = this.props.isHighlightingNode\r\n      ? 'graph-drawer__node--current-highlighting' : '';\r\n    const IconSVG = getCategoryIconSVG(this.props.node.type);\r\n    return (\r\n      <g\r\n        ref={this.svgElement}\r\n        key={this.props.node.id}\r\n        transform={`translate(${this.props.node.topCenterX}, ${this.props.node.topCenterY}) `}\r\n        className={`graph-node \r\n          ${nodeFadedClassModifier} \r\n          ${nodeHalfFadedClassModifier} \r\n          ${nodeDashedClassModifier} \r\n          ${nodeClickableClassModifier} \r\n          ${nodeIsCurrentHighlightingClassModifier}`}\r\n        onMouseOver={this.props.onMouseOver}\r\n        onMouseOut={this.props.onMouseOut}\r\n        onClick={this.props.onClick}\r\n        id={this.props.node.id}\r\n      >\r\n        <rect\r\n          className='graph-node__rect'\r\n          x={-this.props.node.width / 2}\r\n          y={0}\r\n          width={this.props.node.width}\r\n          height={this.props.node.height}\r\n          rx={4}\r\n          ry={4}\r\n          stroke={this.props.node.color}\r\n        />\r\n        {\r\n          getNodeTitleSVGFragment(\r\n            this.props.node.names,\r\n            this.props.matchedNodeNameIndices,\r\n            this.props.node.fontSize,\r\n            this.props.node.textPadding,\r\n            this.props.node.textLineGap,\r\n          )\r\n        }\r\n        {\r\n          <g\r\n            transform={`translate(${-this.props.node.iconRadius}, ${-this.props.node.iconRadius})`}\r\n          >\r\n            {\r\n              IconSVG ? <IconSVG /> : (\r\n                <circle\r\n                  cx={this.props.node.iconRadius}\r\n                  cy={this.props.node.iconRadius}\r\n                  r={this.props.node.iconRadius}\r\n                  fill={this.props.node.color}\r\n                />\r\n              )\r\n            }\r\n          </g>\r\n        }\r\n      </g>\r\n     \r\n    );\r\n  }\r\n}\r\n\r\nconst GraphNodeShape = PropTypes.shape({\r\n  id: PropTypes.string,\r\n  type: PropTypes.string,\r\n  textPadding: PropTypes.number,\r\n  topCenterX: PropTypes.number,\r\n  topCenterY: PropTypes.number,\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n  color: PropTypes.string,\r\n  names: PropTypes.arrayOf(PropTypes.string),\r\n  iconRadius: PropTypes.number,\r\n  textLineGap: PropTypes.number,\r\n  fontSize: PropTypes.number,\r\n});\r\n\r\nGraphNode.propTypes = {\r\n  node: GraphNodeShape.isRequired,\r\n  isHighlightingNode: PropTypes.bool.isRequired,\r\n  isFaded: PropTypes.bool.isRequired,\r\n  isHalfFaded: PropTypes.bool.isRequired,\r\n  isDashed: PropTypes.bool.isRequired,\r\n  isClickable: PropTypes.bool.isRequired,\r\n  onMouseOver: PropTypes.func,\r\n  onMouseOut: PropTypes.func,\r\n  onClick: PropTypes.func,\r\n  matchedNodeNameIndices: MatchedIndicesShape,\r\n};\r\n\r\nGraphNode.defaultProps = {\r\n  onMouseOver: () => {},\r\n  onMouseOut: () => {},\r\n  onClick: () => {},\r\n  matchedNodeNameIndices: [],\r\n};\r\n\r\nexport default GraphNode;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './GraphEdge.css';\r\n\r\nclass GraphEdge extends React.Component {\r\n  render() {\r\n    const edgeRequiredClassModifier = this.props.edge.required ? 'graph-edge--required' : '';\r\n    const edgeFadedClassModifier = this.props.isFaded ? 'graph-edge--faded' : '';\r\n    const edgeHalfFadedClassModifier = this.props.isHalfFaded ? 'graph-edge--half-faded' : '';\r\n    const edgeHighlightedClassModifier = this.props.isHighlighted ? 'graph-edge--highlighted' : '';\r\n    \r\n\r\n    return (\r\n      \r\n        \r\n         <path\r\n        className={`graph-edge \r\n          ${edgeRequiredClassModifier} \r\n          ${edgeFadedClassModifier} \r\n          ${edgeHalfFadedClassModifier} \r\n          ${edgeHighlightedClassModifier}`}\r\n          marker-end=\"url(#markerArrow)\"//adding arrow\r\n         \r\n        d={this.props.edge.pathString}\r\n      />\r\n      \r\n     \r\n     \r\n\r\n     \r\n      \r\n      \r\n    );\r\n  }\r\n}\r\n\r\nGraphEdge.propTypes = {\r\n  edge: PropTypes.object.isRequired,\r\n  isFaded: PropTypes.bool.isRequired,\r\n  isHalfFaded: PropTypes.bool.isRequired,\r\n  isHighlighted: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default GraphEdge;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport GraphNode from '../GraphNode/GraphNode';\r\nimport GraphEdge from '../GraphEdge/GraphEdge';\r\nimport { SearchResultItemShape } from '../../utils';\r\nimport './GraphDrawer.css';\r\n\r\nclass GraphDrawer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.graphDomRef = React.createRef();\r\n    this.graphNodeRefs = [];\r\n    this.nodeSVGElementInitialized = false;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // check if need update all node's svg elements\r\n    // this only happens once, at the first time graph is rendered\r\n    if (this.props.isGraphView\r\n       && this.props.layoutInitialized\r\n       && !this.nodeSVGElementInitialized) {\r\n      const graphNodesSVGElements = this.props.nodes.map(node => ({\r\n        nodeID: node.id,\r\n        svgElement: this.getNodeRef(node.id).current.getSVGElement(),\r\n      }))\r\n        .reduce((acc, cur) => {\r\n          acc[cur.nodeID] = cur.svgElement;\r\n          return acc;\r\n        }, {});\r\n      this.nodeSVGElementInitialized = true;\r\n      this.props.onGraphNodesSVGElementsUpdated(graphNodesSVGElements);\r\n    }\r\n  }\r\n\r\n  onMouseOverNode = (node) => {\r\n    this.props.onHoverNode(node.id);\r\n  }\r\n\r\n  onMouseOutNode = () => {\r\n    this.props.onCancelHoverNode();\r\n  }\r\n\r\n  onClickNode = (node) => {\r\n    this.props.onClickNode(node.id);\r\n  }\r\n\r\n  getNodeRef = (nodeID) => {\r\n    if (!this.graphNodeRefs[nodeID]) {\r\n      this.graphNodeRefs[nodeID] = React.createRef();\r\n    }\r\n    return this.graphNodeRefs[nodeID];\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.layoutInitialized) return (<React.Fragment />);\r\n    const boundingBoxLength = this.props.graphBoundingBox[2][0];\r\n    const fittingScale = Math.min(\r\n      this.props.canvasWidth,\r\n      this.props.canvasHeight,\r\n    ) / boundingBoxLength;\r\n    const fittingTransX = Math.abs(\r\n      (boundingBoxLength - (this.props.canvasWidth / fittingScale)) / 2,\r\n    );\r\n    const fittingTransY = Math.abs(\r\n      (boundingBoxLength - (this.props.canvasHeight / fittingScale)) / 2,\r\n    );\r\n    if (isNaN(fittingTransX) || isNaN(fittingTransY) || isNaN(fittingScale)) return <g />;\r\n    return (\r\n      <g\r\n        className='graph-drawer'\r\n        transform={`scale(${fittingScale}) translate(${fittingTransX}, ${fittingTransY}) `}\r\n        ref={this.graphDomRef}\r\n      >\r\n         {\r\n          this.props.nodes.map((node) => {\r\n            let isNodeFaded = false;\r\n            let isNodeClickable = true;\r\n            let isHighlightingNode = false;\r\n            let isNodeHalfFaded = false;\r\n            let isNodeDashed = false;\r\n            if (this.props.isSearchMode) {\r\n              isNodeFaded = !this.props.matchedNodeIDs.includes(node.id);\r\n              isNodeDashed = this.props.matchedNodeIDsInNameAndDescription.length > 0\r\n                && !isNodeFaded && !this.props.matchedNodeIDsInNameAndDescription.includes(node.id);\r\n              isNodeClickable = !isNodeFaded;\r\n            } else if (this.props.highlightingNode) {\r\n              isHighlightingNode = (this.props.highlightingNode.id === node.id);\r\n              isNodeClickable =\r\n                this.props.highlightingNode.id === node.id\r\n                || (this.props.secondHighlightingNodeCandidateIDs.length > 1\r\n                  && this.props.secondHighlightingNodeCandidateIDs.includes(node.id));\r\n\r\n              isNodeFaded = !this.props.relatedNodeIDs.includes(node.id);\r\n              if (this.props.secondHighlightingNodeID) {\r\n                isNodeHalfFaded = !isNodeFaded && !this.props.pathRelatedToSecondHighlightingNode\r\n                  .find(e => (e.source === node.id || e.target === node.id));\r\n              }\r\n            }\r\n            let matchedNodeNameIndices = [];\r\n            this.props.searchResult.forEach((item) => {\r\n              if (item.item.id === node.id) {\r\n                item.matches.forEach((matchItem) => {\r\n                  if (matchItem.key === 'title') {\r\n                    matchedNodeNameIndices = matchItem.indices;\r\n                  }\r\n                });\r\n              }\r\n            });\r\n            return (\r\n              <GraphNode\r\n                key={node.id}\r\n                node={node}\r\n                isHighlightingNode={isHighlightingNode}\r\n                isFaded={isNodeFaded}\r\n                isHalfFaded={isNodeHalfFaded}\r\n                isDashed={isNodeDashed}\r\n                isClickable={isNodeClickable}\r\n                onMouseOver={() => this.onMouseOverNode(node)}\r\n                onMouseOut={this.onMouseOutNode}\r\n                onClick={() => this.onClickNode(node)}\r\n                ref={this.getNodeRef(node.id)}\r\n                matchedNodeNameIndices={matchedNodeNameIndices}\r\n              />\r\n            \r\n            );\r\n          })\r\n        }\r\n        {\r\n          this.props.edges.map((edge, i) => {\r\n            let isEdgeFaded = false;\r\n            let isEdgeHalfFaded = false;\r\n            let isEdgeHighlighted = false;\r\n            if (this.props.isSearchMode) {\r\n              isEdgeFaded = true;\r\n            } else if (this.props.highlightingNode) {\r\n              const isEdgeRelatedToHighlightedNode =\r\n                this.props.relatedNodeIDs.includes(edge.source)\r\n                && this.props.relatedNodeIDs.includes(edge.target);\r\n              if (this.props.secondHighlightingNodeID) {\r\n                const isEdgeAlongPathRelatedToSecondHighlightNode =\r\n                  !!this.props.pathRelatedToSecondHighlightingNode\r\n                    .find(e => (e.source === edge.source && e.target === edge.target));\r\n                isEdgeHalfFaded = isEdgeRelatedToHighlightedNode\r\n                  && !isEdgeAlongPathRelatedToSecondHighlightNode;\r\n                isEdgeFaded = !isEdgeRelatedToHighlightedNode;\r\n                isEdgeHighlighted = isEdgeAlongPathRelatedToSecondHighlightNode;\r\n              } else {\r\n                isEdgeFaded = !isEdgeRelatedToHighlightedNode;\r\n                isEdgeHighlighted = isEdgeRelatedToHighlightedNode;\r\n              }\r\n            }\r\n            return (           \r\n              <GraphEdge\r\n                key={`${edge.source}-${edge.target}-${i}`}\r\n                edge={edge}\r\n                isRequired={edge.required}\r\n                isFaded={isEdgeFaded}\r\n                isHalfFaded={isEdgeHalfFaded}\r\n                isHighlighted={isEdgeHighlighted}\r\n              />\r\n    \r\n            );\r\n          })\r\n        }\r\n       \r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nGraphDrawer.propTypes = {\r\n  nodes: PropTypes.arrayOf(PropTypes.object),\r\n  edges: PropTypes.arrayOf(PropTypes.object),\r\n  graphBoundingBox: PropTypes.array,\r\n  layoutInitialized: PropTypes.bool,\r\n  canvasWidth: PropTypes.number,\r\n  canvasHeight: PropTypes.number,\r\n  onHoverNode: PropTypes.func,\r\n  onCancelHoverNode: PropTypes.func,\r\n  onClickNode: PropTypes.func,\r\n  highlightingNode: PropTypes.object,\r\n  relatedNodeIDs: PropTypes.array,\r\n  secondHighlightingNodeID: PropTypes.string,\r\n  secondHighlightingNodeCandidateIDs: PropTypes.arrayOf(PropTypes.string),\r\n  pathRelatedToSecondHighlightingNode: PropTypes.arrayOf(PropTypes.object),\r\n  isGraphView: PropTypes.bool,\r\n  isSearchMode: PropTypes.bool,\r\n  matchedNodeIDs: PropTypes.arrayOf(PropTypes.string),\r\n  matchedNodeIDsInNameAndDescription: PropTypes.arrayOf(PropTypes.string),\r\n  onGraphNodesSVGElementsUpdated: PropTypes.func,\r\n  searchResult: PropTypes.arrayOf(SearchResultItemShape),\r\n};\r\n\r\nGraphDrawer.defaultProps = {\r\n  nodes: [],\r\n  edges: [],\r\n  graphBoundingBox: [[0, 0], [0, 1], [1, 1], [1, 0]],\r\n  layoutInitialized: false,\r\n  canvasWidth: 1000,\r\n  canvasHeight: 1000,\r\n  onHoverNode: () => {},\r\n  onCancelHoverNode: () => {},\r\n  onClickNode: () => {},\r\n  highlightingNode: null,\r\n  relatedNodeIDs: [],\r\n  secondHighlightingNodeID: null,\r\n  secondHighlightingNodeCandidateIDs: [],\r\n  pathRelatedToSecondHighlightingNode: [],\r\n  isGraphView: true,\r\n  isSearchMode: false,\r\n  matchedNodeIDs: [],\r\n  matchedNodeIDsInNameAndDescription: [],\r\n  onGraphNodesSVGElementsUpdated: () => {},\r\n  searchResult: [],\r\n};\r\n\r\nexport default GraphDrawer;\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  hoverNode,\r\n  clickNode,\r\n  setGraphNodesSVGElements,\r\n} from '../../action';\r\nimport GraphDrawer from './GraphDrawer';\r\n\r\nconst ReduxGraphDrawer = (() => {\r\n  const mapStateToProps = state => ({\r\n    nodes: state.ddgraph.nodes,\r\n    edges: state.ddgraph.edges,\r\n    graphBoundingBox: state.ddgraph.graphBoundingBox,\r\n    layoutInitialized: state.ddgraph.layoutInitialized,\r\n    highlightingNode: state.ddgraph.highlightingNode,\r\n    relatedNodeIDs: state.ddgraph.relatedNodeIDs,\r\n    secondHighlightingNodeCandidateIDs: state.ddgraph.secondHighlightingNodeCandidateIDs,\r\n    pathRelatedToSecondHighlightingNode: state.ddgraph.pathRelatedToSecondHighlightingNode,\r\n    secondHighlightingNodeID: state.ddgraph.secondHighlightingNodeID,\r\n    isGraphView: state.ddgraph.isGraphView,\r\n    matchedNodeIDs: state.ddgraph.matchedNodeIDs,\r\n    matchedNodeIDsInNameAndDescription: state.ddgraph.matchedNodeIDsInNameAndDescription,\r\n    searchResult: state.ddgraph.searchResult,\r\n    isSearchMode: state.ddgraph.isSearchMode,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onHoverNode: nodeID => dispatch(hoverNode(nodeID)),\r\n    onCancelHoverNode: () => dispatch(hoverNode(null)),\r\n    onClickNode: nodeID => dispatch(clickNode(nodeID)),\r\n    onGraphNodesSVGElementsUpdated: graphNodesSVGElements =>\r\n      dispatch(setGraphNodesSVGElements(graphNodesSVGElements)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(GraphDrawer);\r\n})();\r\n\r\nexport default ReduxGraphDrawer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './NodeTooltip.css';\r\n\r\nclass NodeTooltip extends React.Component {\r\n  render() {\r\n    if (!this.props.hoveringNode) return null;\r\n    const hoveringNodeSVGElement = this.props.graphNodesSVGElements\r\n      && this.props.graphNodesSVGElements[this.props.hoveringNode.id];\r\n    const svgBoundingBox = hoveringNodeSVGElement\r\n      ? hoveringNodeSVGElement.getBoundingClientRect() : { top: 0, left: 0, width: 0 };\r\n    const gap = 10;\r\n    const tooltipLeft = (svgBoundingBox.left - this.props.canvasBoundingRect.left)\r\n      + (svgBoundingBox.width / 2);\r\n    const tooltipBottom = (window.innerHeight - svgBoundingBox.top) + gap;\r\n    return (\r\n      <div\r\n        className='node-tooltip'\r\n        style={{\r\n          bottom: tooltipBottom,\r\n          left: tooltipLeft,\r\n        }}\r\n      >\r\n        {\r\n          this.props.hoveringNode && (\r\n            <div className='node-tooltip__wrapper'>\r\n              <span className='node-tooltip__text'>\r\n                {this.props.hoveringNode.label}\r\n              </span>\r\n              <span className='node-tooltip__arrow' />\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNodeTooltip.propTypes = {\r\n  hoveringNode: PropTypes.object,\r\n  canvasBoundingRect: PropTypes.object,\r\n  graphNodesSVGElements: PropTypes.object,\r\n};\r\n\r\nNodeTooltip.defaultProps = {\r\n  hoveringNode: null,\r\n  canvasBoundingRect: { top: 0, left: 0 },\r\n  graphNodesSVGElements: {},\r\n};\r\n\r\nexport default NodeTooltip;\r\n","import { connect } from 'react-redux';\r\nimport NodeTooltip from './NodeTooltip';\r\n\r\nconst ReduxNodeTooltip = (() => {\r\n  const mapStateToProps = state => ({\r\n    hoveringNode: state.ddgraph.hoveringNode,\r\n    canvasBoundingRect: state.ddgraph.canvasBoundingRect,\r\n    graphNodesSVGElements: state.ddgraph.graphNodesSVGElements,\r\n  });\r\n\r\n  return connect(mapStateToProps)(NodeTooltip);\r\n})();\r\n\r\nexport default ReduxNodeTooltip;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@gen3/ui-component/dist/components/Button';\r\nimport './NodePopup.css';\r\n\r\nclass NodePopup extends React.Component {\r\n  handleClickPropertyButton = () => {\r\n    this.props.onOpenOverlayPropertyTable();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.highlightingNode) {\r\n      return (\r\n        <React.Fragment />\r\n      );\r\n    }\r\n    const highlightingNodeSVGElement = this.props\r\n      .graphNodesSVGElements && this.props\r\n      .graphNodesSVGElements[this.props.highlightingNode.id];\r\n    const svgBoundingBox = highlightingNodeSVGElement\r\n      && highlightingNodeSVGElement.getBoundingClientRect\r\n      ? highlightingNodeSVGElement.getBoundingClientRect()\r\n      : { top: 0, left: 0, width: 0, bottom: 0 };\r\n    const popupLeft = (svgBoundingBox.left - this.props.canvasBoundingRect.left)\r\n      + (svgBoundingBox.width / 2);\r\n    const popupTop = svgBoundingBox.bottom - this.props.canvasBoundingRect.top;\r\n    return (\r\n      <div\r\n        className='node-popup'\r\n        style={{\r\n          top: popupTop,\r\n          left: popupLeft,\r\n        }}\r\n      >\r\n        {\r\n          this.props.highlightingNode && (\r\n            <div className='node-popup__wrapper'>\r\n              <div className='node-popup__content'>\r\n                <li className='node-popup__list-item'>{this.props.highlightingNode.requiredPropertiesCount} required properties</li>\r\n                <li className='node-popup__list-item'>{this.props.highlightingNode.optionalPropertiesCount} optional properties</li>\r\n                <Button\r\n                  className='node-popup__button'\r\n                  onClick={this.handleClickPropertyButton}\r\n                  label='Open properties'\r\n                  buttonType='secondary'\r\n                />\r\n              </div>\r\n              <span className='node-popup__arrow node-popup__arrow--outer' />\r\n              <span className='node-popup__arrow node-popup__arrow--inner' />\r\n              <i\r\n                className='node-popup__close g3-icon g3-icon--cross'\r\n                onClick={this.props.onClosePopup}\r\n                onKeyPress={this.props.onClosePopup}\r\n                role='button'\r\n                tabIndex={0}\r\n              />\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNodePopup.propTypes = {\r\n  highlightingNode: PropTypes.object,\r\n  graphNodesSVGElements: PropTypes.object,\r\n  onClosePopup: PropTypes.func,\r\n  canvasBoundingRect: PropTypes.object,\r\n  onOpenOverlayPropertyTable: PropTypes.func,\r\n};\r\n\r\nNodePopup.defaultProps = {\r\n  highlightingNode: null,\r\n  graphNodesSVGElements: null,\r\n  onClosePopup: () => {},\r\n  canvasBoundingRect: { top: 0, left: 0 },\r\n  onOpenOverlayPropertyTable: () => {},\r\n};\r\n\r\nexport default NodePopup;\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  resetGraphHighlight,\r\n  setOverlayPropertyTableHidden,\r\n} from '../../action';\r\nimport NodePopup from './NodePopup';\r\n\r\nconst ReduxNodePopup = (() => {\r\n  const mapStateToProps = state => ({\r\n    highlightingNode: state.ddgraph.highlightingNode,\r\n    canvasBoundingRect: state.ddgraph.canvasBoundingRect,\r\n    graphNodesSVGElements: state.ddgraph.graphNodesSVGElements,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onClosePopup: () => dispatch(resetGraphHighlight()),\r\n    onOpenOverlayPropertyTable: () => dispatch(setOverlayPropertyTableHidden(false)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(NodePopup);\r\n})();\r\n\r\nexport default ReduxNodePopup;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@gen3/ui-component/dist/components/Button';\r\nimport { downloadTemplate, SearchResultItemShape } from '../../utils';\r\nimport { getCategoryIconSVG } from '../../NodeCategories/helper';\r\nimport {\r\n  getNodeDescriptionFragment,\r\n  getNodeTitleFragment,\r\n} from '../../highlightHelper';\r\nimport DataDictionaryPropertyTable from '../../table/DataDictionaryPropertyTable/.';\r\nimport './OverlayPropertyTable.css';\r\n\r\nclass OverlayPropertyTable extends React.Component {\r\n  getTitle = () => {\r\n    if (this.props.isSearchMode) {\r\n      const nodeTitleFragment = getNodeTitleFragment(\r\n        this.props.matchedResult.matches,\r\n        this.props.node.title,\r\n        'overlay-property-table__span',\r\n      );\r\n      return nodeTitleFragment;\r\n    }\r\n\r\n    return this.props.node.title;\r\n  };\r\n\r\n  getDescription = () => {\r\n    if (this.props.isSearchMode) {\r\n      const nodeDescriptionFragment = getNodeDescriptionFragment(\r\n        this.props.matchedResult.matches,\r\n        this.props.node.description,\r\n        'overlay-property-table__span',\r\n      );\r\n      return nodeDescriptionFragment;\r\n    }\r\n\r\n    return this.props.node.description;\r\n  };\r\n\r\n  /**\r\n   * Close the whole overlay property table\r\n   */\r\n  handleClose = () => {\r\n    this.props.onCloseOverlayPropertyTable();\r\n  };\r\n\r\n  /**\r\n   * Toggle the property tabl to display all properties\r\n   */\r\n  handleOpenAllProperties = () => {\r\n    this.props.onOpenMatchedProperties();\r\n  };\r\n\r\n  /**\r\n   * Toggle the property table to display matched properties only\r\n   */\r\n  handleDisplayOnlyMatchedProperties = () => {\r\n    this.props.onCloseMatchedProperties();\r\n  };\r\n\r\n  render() {\r\n    if (!this.props.node || this.props.hidden) return (<React.Fragment />);\r\n    const IconSVG = getCategoryIconSVG(this.props.node.category);\r\n    const searchedNodeNotOpened = this.props.isSearchMode && !this.props.isSearchResultNodeOpened;\r\n    const needHighlightSearchResult = this.props.isSearchMode;\r\n    return (\r\n      <div className='overlay-property-table'>\r\n        <div className='overlay-property-table__background' />\r\n        <div className='overlay-property-table__fixed-container'>\r\n          <div className='overlay-property-table__content'>\r\n            <div className='overlay-property-table__header'>\r\n              <div className='overlay-property-table__category'>\r\n                <IconSVG className='overlay-property-table__category-icon' />\r\n                <h4 className='overlay-property-table__category-text'>{this.props.node.category}</h4>\r\n                {\r\n                  this.props.isSearchMode && (\r\n                    <Button\r\n                      className='overlay-property-table__toggle-node'\r\n                      onClick={searchedNodeNotOpened\r\n                        ? this.handleOpenAllProperties : this.handleDisplayOnlyMatchedProperties}\r\n                      label={searchedNodeNotOpened ? 'See All' : 'See Only Matched'}\r\n                      buttonType='secondary'\r\n                    />\r\n                  )\r\n                }\r\n                <span\r\n                  className='overlay-property-table__close'\r\n                  onClick={this.handleClose}\r\n                  onKeyPress={this.handleClose}\r\n                  role='button'\r\n                  tabIndex={0}\r\n                >\r\n                  Close\r\n                  <i className='overlay-property-table__close-icon g3-icon g3-icon--cross g3-icon--sm' />\r\n                </span>\r\n                <Button\r\n                  className='overlay-property-table__download-button'\r\n                  onClick={() => { downloadTemplate('tsv', this.props.node.id); }}\r\n                  label='TSV'\r\n                  buttonType='secondary'\r\n                  rightIcon='download'\r\n                />\r\n                <Button\r\n                  className='overlay-property-table__download-button'\r\n                  onClick={() => { downloadTemplate('json', this.props.node.id); }}\r\n                  label='JSON'\r\n                  buttonType='secondary'\r\n                  rightIcon='download'\r\n                />\r\n              </div>\r\n              \r\n            </div>\r\n            <div className='overlay-property-table__property'>\r\n              <DataDictionaryPropertyTable\r\n                properties={this.props.node.properties}\r\n                requiredProperties={this.props.node.required}\r\n                hasBorder={false}\r\n                onlyShowMatchedProperties={searchedNodeNotOpened}\r\n                needHighlightSearchResult={needHighlightSearchResult}\r\n                hideIsRequired={searchedNodeNotOpened}\r\n                matchedResult={this.props.matchedResult}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nOverlayPropertyTable.propTypes = {\r\n  hidden: PropTypes.bool,\r\n  node: PropTypes.object,\r\n  onCloseOverlayPropertyTable: PropTypes.func,\r\n  isSearchMode: PropTypes.bool,\r\n  matchedResult: SearchResultItemShape,\r\n  onOpenMatchedProperties: PropTypes.func,\r\n  onCloseMatchedProperties: PropTypes.func,\r\n  isSearchResultNodeOpened: PropTypes.bool,\r\n};\r\n\r\nOverlayPropertyTable.defaultProps = {\r\n  hidden: true,\r\n  node: null,\r\n  onCloseOverlayPropertyTable: () => {},\r\n  isSearchMode: false,\r\n  matchedResult: {},\r\n  onOpenMatchedProperties: () => {},\r\n  onCloseMatchedProperties: () => {},\r\n  isSearchResultNodeOpened: false,\r\n};\r\n\r\nexport default OverlayPropertyTable;\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  setOverlayPropertyTableHidden,\r\n  setHighlightingMatchedNodeOpened,\r\n} from '../../action';\r\nimport OverlayPropertyTable from './OverlayPropertyTable';\r\n\r\nconst getNode = (state) => {\r\n  if (state.ddgraph.isSearchMode) {\r\n    if (state.ddgraph.highlightingMatchedNodeID) {\r\n      return state.submission.dictionary[state.ddgraph.highlightingMatchedNodeID];\r\n    }\r\n\r\n    return null;\r\n  }\r\n  if (state.ddgraph.highlightingNode) {\r\n    return state.submission.dictionary[state.ddgraph.highlightingNode.id];\r\n  }\r\n  return null;\r\n};\r\n\r\nconst getSearchResultItem = (state) => {\r\n  if (state.ddgraph.isSearchMode) {\r\n    return state.ddgraph.searchResult\r\n      .find(resItem => resItem.item.id === state.ddgraph.highlightingMatchedNodeID);\r\n  }\r\n  return null;\r\n};\r\n\r\nconst ReduxOverlayPropertyTable = (() => {\r\n  const mapStateToProps = state => ({\r\n    hidden: state.ddgraph.overlayPropertyHidden,\r\n    node: getNode(state),\r\n    isSearchMode: state.ddgraph.isSearchMode,\r\n    matchedResult: getSearchResultItem(state),\r\n    isSearchResultNodeOpened: state.ddgraph.highlightingMatchedNodeOpened,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onCloseOverlayPropertyTable: () => dispatch(setOverlayPropertyTableHidden(true)),\r\n    onOpenMatchedProperties: () => dispatch(setHighlightingMatchedNodeOpened(true)),\r\n    onCloseMatchedProperties: () => dispatch(setHighlightingMatchedNodeOpened(false)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(OverlayPropertyTable);\r\n})();\r\n\r\nexport default ReduxOverlayPropertyTable;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@gen3/ui-component/dist/components/Button';\r\nimport './ActionLayer.css';\r\n\r\n/**\r\n* A layer over the graph.\r\n* Put action buttons here.\r\n*/\r\nclass ActionLayer extends React.Component {\r\n  handleClearSearch = () => {\r\n    this.props.onClearSearchResult();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='action-layer'>\r\n        {\r\n          this.props.isSearchMode && (\r\n            <Button\r\n              className='action-layer__clear-search'\r\n              onClick={this.handleClearSearch}\r\n              label='Clear Search Result'\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nActionLayer.propTypes = {\r\n  isSearchMode: PropTypes.bool,\r\n  onClearSearchResult: PropTypes.func,\r\n};\r\n\r\nActionLayer.defaultProps = {\r\n  isSearchMode: false,\r\n  onClearSearchResult: () => {},\r\n};\r\n\r\nexport default ActionLayer;\r\n","import { connect } from 'react-redux';\r\nimport ActionLayer from './ActionLayer';\r\n\r\nconst ReduxActionLayer = (() => {\r\n  const mapStateToProps = state => ({\r\n    isSearchMode: state.ddgraph.isSearchMode,\r\n  });\r\n\r\n  return connect(mapStateToProps)(ActionLayer);\r\n})();\r\n\r\nexport default ReduxActionLayer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReduxGraphCalculator from '../GraphCalculator/.';\r\nimport ReduxLegend from '../Legend/.';\r\nimport ReduxCanvas from '../Canvas/.';\r\nimport ReduxGraphDrawer from '../GraphDrawer/.';\r\nimport ReduxNodeTooltip from '../NodeTooltip/.';\r\nimport ReduxNodePopup from '../NodePopup/.';\r\nimport ReduxOverlayPropertyTable from '../OverlayPropertyTable/.';\r\nimport ReduxActionLayer from '../ActionLayer/.';\r\n\r\nclass DataDictionaryGraph extends React.Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ReduxGraphCalculator />\r\n        <ReduxLegend />\r\n        <ReduxCanvas>\r\n          <ReduxGraphDrawer />\r\n        </ReduxCanvas>\r\n        <ReduxNodeTooltip />\r\n        <ReduxNodePopup />\r\n        <ReduxOverlayPropertyTable />\r\n        <ReduxActionLayer onClearSearchResult={this.props.onClearSearchResult} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nDataDictionaryGraph.propTypes = {\r\n  onClearSearchResult: PropTypes.func,\r\n};\r\n\r\nDataDictionaryGraph.defaultProps = {\r\n  onClearSearchResult: () => {},\r\n};\r\n\r\nexport default DataDictionaryGraph;\r\n","import Fuse from 'fuse.js';\r\nimport {\r\n  parseDictionaryNodes,\r\n  getPropertyDescription,\r\n  getType,\r\n} from '../../utils';\r\n\r\nexport const ZERO_RESULT_FOUND_MSG = '0 results found. Please try another keyword.';\r\n\r\n/**\r\n * Prepare search items for Fuse.io library\r\n * @params [Object] dictionary\r\n * @returns [Object] search data\r\n */\r\nexport const prepareSearchData = (dictionary) => {\r\n  const searchData = parseDictionaryNodes(dictionary)\r\n    .map((node) => {\r\n      const properties = Object.keys(node.properties).map((propertyKey) => {\r\n        let type = getType(node.properties[propertyKey]);\r\n        if (type === 'UNDEFINED') type = undefined;\r\n        const propertyDescription = getPropertyDescription(node.properties[propertyKey]);\r\n        return {\r\n          name: propertyKey,\r\n          description: propertyDescription,\r\n          type,\r\n        };\r\n      });\r\n      return {\r\n        id: node.id,\r\n        title: node.title,\r\n        description: node.description,\r\n        properties,\r\n      };\r\n    });\r\n  return searchData;\r\n};\r\n\r\nexport const ERR_KEYWORD_TOO_SHORT = 'Keyword too short, try longer keyword.';\r\nexport const ERR_KEYWORD_TOO_LONG = 'Keyword too long (more than 32).';\r\n\r\n/**\r\n * Call Fuse search and returns search result\r\n * @params [Object] searchData - see prepareSearchData returns\r\n * @params [string] keyword\r\n * @returns [SearchResultItemShape[]] (see ../../utils).\r\n */\r\nexport const searchKeyword = (searchData, keyword) => {\r\n  if (!keyword || keyword.length < 2) {\r\n    return {\r\n      result: [],\r\n      errorMsg: ERR_KEYWORD_TOO_SHORT,\r\n    };\r\n  }\r\n  // 32 is length limitation of Fuse search library\r\n  if (keyword.length > 32) {\r\n    return {\r\n      result: [],\r\n      errorMsg: ERR_KEYWORD_TOO_LONG,\r\n    };\r\n  }\r\n  const halfLength = Math.round(keyword.length / 2);\r\n  const minMatchCharLength = Math.min(Math.max(halfLength, 10), keyword.length);\r\n  const options = {\r\n    keys: [\r\n      'title',\r\n      'description',\r\n      'properties.name',\r\n      'properties.description',\r\n      'properties.type',\r\n    ],\r\n    includeMatches: true,\r\n    threshold: 0.3,\r\n    shouldSort: true,\r\n    includeScore: true,\r\n    minMatchCharLength,\r\n  };\r\n  const handler = new Fuse(searchData, options);\r\n  const result = handler.search(keyword)\r\n    .map((resItem) => {\r\n      // A bug in Fuse sometimes returns wrong indices that end < start\r\n      const matches = resItem.matches\r\n        .filter(matchItem => matchItem.indices[0][1] >= matchItem.indices[0][0]);\r\n      return {\r\n        ...resItem,\r\n        matches,\r\n      };\r\n    })\r\n    .map((resItem) => {\r\n      // filter out matches that is too shorter than keyword\r\n      const matches = resItem.matches\r\n        .filter((matchItem) => {\r\n          const matchLen = (matchItem.indices[0][1] - matchItem.indices[0][0]) + 1;\r\n          return matchLen >= halfLength;\r\n        });\r\n      return {\r\n        ...resItem,\r\n        matches,\r\n      };\r\n    })\r\n    .filter(resItem => resItem.matches.length > 0);\r\n  const errorMsg = (result && result.length > 0) ? '' : ZERO_RESULT_FOUND_MSG;\r\n  return {\r\n    result,\r\n    errorMsg,\r\n  };\r\n};\r\n\r\n/**\r\n * Prepare search items for Fuse.io library, call Fuse constructor\r\n * and return a search instance handler.\r\n * @params [SearchResultItemShape[]] search result (SearchResultItemShape from '../../utils')\r\n * @returns [Object] summary\r\n */\r\nexport const getSearchSummary = (result) => {\r\n  const matchedNodeIDsInNameAndDescription = [];\r\n  const matchedNodeIDsInProperties = [];\r\n  const generalMatchedNodeIDs = [];\r\n  let matchedPropertiesCount = 0;\r\n  let matchedNodeNameAndDescriptionsCount = 0;\r\n  result.forEach((resItem) => {\r\n    const nodeID = resItem.item.id;\r\n    resItem.matches.forEach((matchedItem) => {\r\n      switch (matchedItem.key) {\r\n      case 'properties.type':\r\n      case 'properties.name':\r\n      case 'properties.description':\r\n        matchedPropertiesCount += 1;\r\n        if (!matchedNodeIDsInProperties.includes(nodeID)) {\r\n          matchedNodeIDsInProperties.push(nodeID);\r\n        }\r\n        if (!generalMatchedNodeIDs.includes(nodeID)) {\r\n          generalMatchedNodeIDs.push(nodeID);\r\n        }\r\n        break;\r\n      case 'title':\r\n      case 'description':\r\n        matchedNodeNameAndDescriptionsCount += 1;\r\n        if (!matchedNodeIDsInNameAndDescription.includes(nodeID)) {\r\n          matchedNodeIDsInNameAndDescription.push(nodeID);\r\n        }\r\n        if (!generalMatchedNodeIDs.includes(nodeID)) {\r\n          generalMatchedNodeIDs.push(nodeID);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n      }\r\n    });\r\n  });\r\n  return {\r\n    matchedPropertiesCount,\r\n    matchedNodeNameAndDescriptionsCount,\r\n    matchedNodeIDsInNameAndDescription,\r\n    matchedNodeIDsInProperties,\r\n    generalMatchedNodeIDs,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AutoComplete from '@gen3/ui-component/dist/components/AutoComplete';\r\nimport { compareTwoStrings } from 'string-similarity';\r\nimport { prepareSearchData, searchKeyword, getSearchSummary, ZERO_RESULT_FOUND_MSG } from './searchHelper';\r\nimport './DictionarySearcher.css';\r\n\r\nclass DictionarySearcher extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.searchData = prepareSearchData(props.dictionary);\r\n    this.autoCompleteRef = React.createRef();\r\n    this.state = {\r\n      suggestionList: [],\r\n      isSearchFinished: false,\r\n      searchResult: {\r\n        matchedNodes: [],\r\n        summary: {},\r\n      },\r\n      hasError: false,\r\n      errorMsg: '',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // resume search status after switching back from other pages\r\n    if (this.props.currentSearchKeyword) {\r\n      this.autoCompleteRef.current.setInputText(this.props.currentSearchKeyword);\r\n      this.search(this.props.currentSearchKeyword);\r\n    }\r\n  }\r\n\r\n  onClearResult = () => {\r\n    this.resetSearchResult();\r\n    this.autoCompleteRef.current.clearInput();\r\n  };\r\n\r\n  launchClearSearchFromOutside = () => {\r\n    this.onClearResult();\r\n  };\r\n\r\n  launchSearchFromOutside = (keyword) => {\r\n    this.autoCompleteRef.current.setInputText(keyword);\r\n    this.search(keyword);\r\n  }\r\n\r\n  search = (str) => {\r\n    this.props.setIsSearching(true);\r\n    const { result, errorMsg } = searchKeyword(this.searchData, str);\r\n    if (!result || result.length === 0) {\r\n      this.props.setIsSearching(false);\r\n      this.props.onSearchResultUpdated([], []);\r\n      this.setState({\r\n        isSearchFinished: true,\r\n        hasError: true,\r\n        errorMsg,\r\n        suggestionList: [],\r\n      });\r\n      return;\r\n    }\r\n    const summary = getSearchSummary(result);\r\n    this.setState({\r\n      isSearchFinished: true,\r\n      hasError: false,\r\n      searchResult: {\r\n        matchedNodes: result,\r\n        summary,\r\n      },\r\n      suggestionList: [],\r\n    });\r\n    this.props.setIsSearching(false);\r\n    this.props.onSearchResultUpdated(result, summary);\r\n    this.props.onSearchHistoryItemCreated({\r\n      keywordStr: str,\r\n      matchedCount: summary.generalMatchedNodeIDs.length,\r\n    });\r\n    this.props.onSaveCurrentSearchKeyword(str);\r\n  };\r\n\r\n  resetSearchResult = () => {\r\n    this.setState({\r\n      isSearchFinished: false,\r\n      searchResult: {\r\n        matchedNodes: [],\r\n        summary: {},\r\n      },\r\n    });\r\n    this.props.onSearchResultCleared();\r\n  };\r\n\r\n  inputChangeFunc = (inputText) => {\r\n    this.props.onStartSearching();\r\n    this.resetSearchResult();\r\n    const { result } = searchKeyword(this.searchData, inputText);\r\n    const matchedStrings = {};\r\n    result.forEach((resItem) => {\r\n      resItem.matches.forEach((matchItem) => {\r\n        if (!matchedStrings[matchItem.value]) {\r\n          matchedStrings[matchItem.value] = {\r\n            matchedPieceIndices: matchItem.indices.map(arr => ([arr[0], arr[1] + 1])),\r\n          };\r\n        }\r\n      });\r\n    });\r\n    const suggestionList = Object.keys(matchedStrings)\r\n      .sort((str1, str2) => compareTwoStrings(str2, inputText) - compareTwoStrings(str1, inputText))\r\n      .map(str => ({\r\n        fullString: str,\r\n        matchedPieceIndices: matchedStrings[str].matchedPieceIndices,\r\n      }));\r\n    this.setState({\r\n      suggestionList,\r\n    });\r\n  };\r\n\r\n  suggestionItemClickFunc = (suggestionItem) => {\r\n    this.autoCompleteRef.current.setInputText(suggestionItem.fullString);\r\n    this.search(suggestionItem.fullString);\r\n  };\r\n\r\n  submitInputFunc = (inputText) => {\r\n    this.search(inputText);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='data-dictionary-searcher'>\r\n        <AutoComplete\r\n          ref={this.autoCompleteRef}\r\n          suggestionList={this.state.suggestionList}\r\n          inputPlaceHolderText='Search in Dictionary'\r\n          onSuggestionItemClick={this.suggestionItemClickFunc}\r\n          onInputChange={this.inputChangeFunc}\r\n          onSubmitInput={this.submitInputFunc}\r\n        />\r\n        {\r\n          this.state.isSearchFinished && (\r\n            <React.Fragment>\r\n              {\r\n                !this.state.hasError && (\r\n                  this.state.searchResult.matchedNodes.length > 0 ? (\r\n                    <React.Fragment>\r\n                      <div className='dictionary-searcher__result'>\r\n                        <h4 className='dictionary-searcher__result-text'>Search Results</h4>\r\n                        <span\r\n                          className='dictionary-searcher__result-clear body'\r\n                          onClick={this.onClearResult}\r\n                          role='button'\r\n                          tabIndex={0}\r\n                          onKeyPress={this.onClearResult}\r\n                        >Clear Result</span>\r\n                      </div>\r\n                      <li className='dictionary-searcher__result-item body'>\r\n                        <span className='dictionary-searcher__result-count'>\r\n                          {this.state.searchResult.summary.matchedNodeNameAndDescriptionsCount}\r\n                        </span> matches in nodes (title and description)\r\n                      </li>\r\n                      <li className='dictionary-searcher__result-item body'>\r\n                        <span className='dictionary-searcher__result-count'>\r\n                          {this.state.searchResult.summary.matchedPropertiesCount}\r\n                        </span> matches in node properties\r\n                      </li>\r\n                    </React.Fragment>\r\n                  ) : (\r\n                    <p>{ZERO_RESULT_FOUND_MSG}</p>\r\n                  )\r\n                )\r\n              }\r\n              {\r\n                this.state.hasError && (\r\n                  <p>{this.state.errorMsg}</p>\r\n                )\r\n              }\r\n            </React.Fragment>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDictionarySearcher.propTypes = {\r\n  dictionary: PropTypes.object.isRequired,\r\n  setIsSearching: PropTypes.func,\r\n  onSearchResultUpdated: PropTypes.func,\r\n  onSearchHistoryItemCreated: PropTypes.func,\r\n  onSearchResultCleared: PropTypes.func,\r\n  onSaveCurrentSearchKeyword: PropTypes.func,\r\n  currentSearchKeyword: PropTypes.string,\r\n  onStartSearching: PropTypes.func,\r\n};\r\n\r\nDictionarySearcher.defaultProps = {\r\n  setIsSearching: () => {},\r\n  onSearchResultUpdated: () => {},\r\n  onSearchHistoryItemCreated: () => {},\r\n  onSearchResultCleared: () => {},\r\n  onSaveCurrentSearchKeyword: () => {},\r\n  currentSearchKeyword: '',\r\n  onStartSearching: () => {},\r\n};\r\n\r\nexport default DictionarySearcher;\r\n","import { connect } from 'react-redux';\r\nimport {\r\n  setIsSearching,\r\n  setSearchResult,\r\n  addSearchHistoryItem,\r\n  clearSearchResult,\r\n  saveCurrentSearchKeyword,\r\n  resetGraphHighlight,\r\n} from '../../action';\r\nimport DictionarySearcher from './DictionarySearcher';\r\n\r\nconst ReduxDictionarySearcher = (() => {\r\n  const mapStateToProps = state => ({\r\n    dictionary: state.submission.dictionary,\r\n    currentSearchKeyword: state.ddgraph.currentSearchKeyword,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    setIsSearching: isSearching => dispatch(setIsSearching(isSearching)),\r\n    onSearchResultUpdated: (result, summary) => dispatch(setSearchResult(result, summary)),\r\n    onSearchHistoryItemCreated: searchHistoryItem =>\r\n      dispatch(addSearchHistoryItem(searchHistoryItem)),\r\n    onSearchResultCleared: () => dispatch(clearSearchResult()),\r\n    onSaveCurrentSearchKeyword: keyword => dispatch(saveCurrentSearchKeyword(keyword)),\r\n    onStartSearching: () => dispatch(resetGraphHighlight()),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps, null, { withRef: true })(DictionarySearcher);\r\n})();\r\n\r\nexport default ReduxDictionarySearcher;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './DictionarySearchHistory.css';\r\n\r\nclass DictionarySearchHistory extends React.Component {\r\n  handleClick = (keyword) => {\r\n    this.props.onClickSearchHistoryItem(keyword);\r\n  }\r\n\r\n  handleClearHistory = () => {\r\n    this.props.onClearSearchHistoryItems();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.searchHistoryItems && this.props.searchHistoryItems.length > 0) {\r\n      return (\r\n        <div className='dictionary-search-history'>\r\n          <div className='dictionary-search-history__title'>\r\n            <h4 className='dictionary-search-history__title-text'>\r\n              Last Search\r\n            </h4>\r\n            <span\r\n              className='dictionary-search-history__clear'\r\n              onClick={this.handleClearHistory}\r\n              role='button'\r\n              onKeyPress={this.handleClearHistory}\r\n              tabIndex={0}\r\n            >\r\n              Clear History\r\n            </span>\r\n          </div>\r\n          <div>\r\n            {\r\n              this.props.searchHistoryItems && this.props.searchHistoryItems.map((item) => {\r\n                const zeroCountModifier = item.matchedCount === 0 ? 'dictionary-search-history__item-badge--zero' : '';\r\n                return (\r\n                  <div\r\n                    className='dictionary-search-history__item'\r\n                    key={item.keywordStr}\r\n                    onClick={() => this.handleClick(item.keywordStr)}\r\n                    role='button'\r\n                    onKeyPress={() => this.handleClick(item.keywordStr)}\r\n                    tabIndex={0}\r\n                  >\r\n                    <span className='dictionary-search-history__item-keyword'>{item.keywordStr}</span>\r\n                    <span className={`dictionary-search-history__item-badge ${zeroCountModifier}`}>{item.matchedCount}</span>\r\n                  </div>\r\n                );\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nconst SearchHistoryItemShape = PropTypes.shape({\r\n  keywordStr: PropTypes.string,\r\n  matchedCount: PropTypes.number,\r\n});\r\n\r\nDictionarySearchHistory.propTypes = {\r\n  searchHistoryItems: PropTypes.arrayOf(SearchHistoryItemShape),\r\n  onClickSearchHistoryItem: PropTypes.func,\r\n  onClearSearchHistoryItems: PropTypes.func,\r\n};\r\n\r\nDictionarySearchHistory.defaultProps = {\r\n  searchHistoryItems: [],\r\n  onClickSearchHistoryItem: () => {},\r\n  onClearSearchHistoryItems: () => {},\r\n};\r\n\r\nexport default DictionarySearchHistory;\r\n","import { connect } from 'react-redux';\r\nimport { clearSearchHistoryItems } from '../../action';\r\nimport DictionarySearchHistory from './DictionarySearchHistory';\r\n\r\nconst ReduxDictionarySearchHistory = (() => {\r\n  const mapStateToProps = state => ({\r\n    searchHistoryItems: state.ddgraph.searchHistoryItems,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onClearSearchHistoryItems: () => dispatch(clearSearchHistoryItems()),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(DictionarySearchHistory);\r\n})();\r\n\r\nexport default ReduxDictionarySearchHistory;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReduxDataDictionaryTable from './table/DataDictionaryTable';\r\nimport ReduxDataModelStructure from './DataModelStructure';\r\nimport DataDictionaryGraph from './graph/DataDictionaryGraph/.';\r\nimport ReduxDictionarySearcher from './search/DictionarySearcher/.';\r\nimport ReduxDictionarySearchHistory from './search/DictionarySearchHistory/.';\r\nimport './DataDictionary.css';\r\n\r\nclass DataDictionary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.dictionarySearcherRef = React.createRef();\r\n  }\r\n\r\n  setGraphView = (isGraphView) => {\r\n    this.props.onSetGraphView(isGraphView);\r\n  };\r\n\r\n  handleClickSearchHistoryItem = (keyword) => {\r\n    this.dictionarySearcherRef.current.getWrappedInstance().launchSearchFromOutside(keyword);\r\n  };\r\n\r\n  handleClearSearchResult = () => {\r\n    this.dictionarySearcherRef.current.getWrappedInstance().launchClearSearchFromOutside();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='data-dictionary'>\r\n        <div className='data-dictionary__sidebar'>\r\n          <div className='data-dictionary__switch'>\r\n            <span\r\n              className={`data-dictionary__switch-button ${!this.props.isGraphView ? '' : 'data-dictionary__switch-button--active'}`}\r\n              onClick={() => { this.setGraphView(true); }}\r\n              onKeyPress={() => { this.setGraphView(true); }}\r\n              role='button'\r\n              tabIndex={0}\r\n            >\r\n              Graph View\r\n            </span>\r\n            <span\r\n              className={`data-dictionary__switch-button ${this.props.isGraphView ? '' : 'data-dictionary__switch-button--active'}`}\r\n              onClick={() => { this.setGraphView(false); }}\r\n              onKeyPress={() => { this.setGraphView(true); }}\r\n              role='button'\r\n              tabIndex={0}\r\n            >\r\n              Table View\r\n            </span>\r\n          </div>\r\n          <ReduxDictionarySearcher ref={this.dictionarySearcherRef} />\r\n          <ReduxDataModelStructure />\r\n          <ReduxDictionarySearchHistory\r\n            onClickSearchHistoryItem={this.handleClickSearchHistoryItem}\r\n          />\r\n          <div className='data-dictionary__search-history' />\r\n        </div>\r\n        <div\r\n          className='data-dictionary__main'\r\n        >\r\n          { this.props.isGraphView\r\n            ? (\r\n              <div className={`data-dictionary__graph ${this.props.isGraphView ? '' : 'data-dictionary__graph--hidden'}`}>\r\n                <DataDictionaryGraph\r\n                  onClearSearchResult={this.handleClearSearchResult}\r\n                />\r\n              </div>\r\n            )\r\n            : (\r\n              <div className={`data-dictionary__table ${!this.props.isGraphView ? '' : 'data-dictionary__table--hidden'}`}>\r\n                <ReduxDataDictionaryTable />\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDataDictionary.propTypes = {\r\n  onSetGraphView: PropTypes.func,\r\n  isGraphView: PropTypes.bool,\r\n};\r\n\r\nDataDictionary.defaultProps = {\r\n  onSetGraphView: () => {},\r\n  isGraphView: false,\r\n};\r\n\r\n\r\nexport default DataDictionary;\r\n","import { connect } from 'react-redux';\r\nimport { setGraphView } from './action.js';\r\nimport DataDictionary from './DataDictionary';\r\n\r\nconst ReduxDataDictionary = (() => {\r\n  const mapStateToProps = state => ({\r\n    isGraphView: state.ddgraph.isGraphView,\r\n  });\r\n\r\n  const mapDispatchToProps = dispatch => ({\r\n    onSetGraphView: isGraphView => dispatch(setGraphView(isGraphView)),\r\n  });\r\n\r\n  return connect(mapStateToProps, mapDispatchToProps)(DataDictionary);\r\n})();\r\n\r\nexport default ReduxDataDictionary;\r\n","import {\r\n  getSearchHistoryItems,\r\n  clearSearchHistoryItems,\r\n  addSearchHistoryItems,\r\n} from './utils';\r\n\r\nconst ddgraphInitialState = {\r\n  isGraphView: true,\r\n  layoutInitialized: false,\r\n  nodes: [],\r\n  edges: [],\r\n  graphBoundingBox: [],\r\n  legendItems: [],\r\n  hoveringNode: null,\r\n  highlightingNode: null,\r\n  relatedNodeIDs: [],\r\n  secondHighlightingNodeID: null,\r\n  dataModelStructure: null,\r\n  overlayPropertyHidden: true,\r\n  canvasBoundingRect: { top: 0, left: 0 },\r\n  needReset: false,\r\n  tableExpandNodeID: null,\r\n  searchHistoryItems: getSearchHistoryItems(),\r\n  graphNodesSVGElements: null,\r\n  currentSearchKeyword: '',\r\n  searchResult: [],\r\n  matchedNodeIDs: [],\r\n  matchedNodeIDsInProperties: [],\r\n  matchedNodeIDsInNameAndDescription: [],\r\n  isSearchMode: false,\r\n  isSearching: false,\r\n  highlightingMatchedNodeID: null,\r\n  highlightingMatchedNodeOpened: false,\r\n};\r\n\r\nconst ddgraph = (state = ddgraphInitialState, action) => {\r\n  switch (action.type) {\r\n  case 'TOGGLE_GRAPH_TABLE_VIEW': {\r\n    return {\r\n      ...state,\r\n      isGraphView: action.isGraphView,\r\n      overlayPropertyHidden: true,\r\n    };\r\n  }\r\n  case 'GRAPH_LAYOUT_CALCULATED': {\r\n    return {\r\n      ...state,\r\n      nodes: action.nodes,\r\n      edges: action.edges,\r\n      graphBoundingBox: action.graphBoundingBox,\r\n      layoutInitialized: true,\r\n    };\r\n  }\r\n  case 'GRAPH_LEGEND_CALCULATED': {\r\n    return {\r\n      ...state,\r\n      legendItems: action.legendItems,\r\n    };\r\n  }\r\n  case 'GRAPH_UPDATE_HOVERING_NODE': {\r\n    const newHoveringNode = state.nodes.find(n => n.id === action.nodeID);\r\n    return {\r\n      ...state,\r\n      hoveringNode: newHoveringNode,\r\n    };\r\n  }\r\n  case 'GRAPH_UPDATE_CANVAS_BOUNDING_RECT': {\r\n    return {\r\n      ...state,\r\n      canvasBoundingRect: action.canvasBoundingRect,\r\n    };\r\n  }\r\n  case 'GRAPH_UPDATE_RELATED_HIGHLIGHTING_NODE': {\r\n    return {\r\n      ...state,\r\n      relatedNodeIDs: action.relatedNodeIDs,\r\n    };\r\n  }\r\n  case 'GRAPH_UPDATE_SECOND_HIGHLIGHTING_NODE_CANDIDATES': {\r\n    return {\r\n      ...state,\r\n      secondHighlightingNodeCandidateIDs: action.secondHighlightingNodeCandidateIDs,\r\n    };\r\n  }\r\n  case 'GRAPH_UPDATE_PATH_RELATED_TO_SECOND_HIGHLIGHTING_NODE': {\r\n    return {\r\n      ...state,\r\n      pathRelatedToSecondHighlightingNode: action.pathRelatedToSecondHighlightingNode,\r\n    };\r\n  }\r\n  case 'GRAPH_UPDATE_DATA_MODEL_STRUCTURE': {\r\n    return {\r\n      ...state,\r\n      dataModelStructure: action.dataModelStructure,\r\n      dataModelStructureRelatedNodeIDs: action.dataModelStructureRelatedNodeIDs,\r\n      dataModelStructureAllRoutesBetween: action.routesBetweenStartEndNodes,\r\n    };\r\n  }\r\n  case 'GRAPH_SET_OVERLAY_PROPERTY_TABLE_HIDDEN': {\r\n    return {\r\n      ...state,\r\n      overlayPropertyHidden: action.isHidden,\r\n    };\r\n  }\r\n  case 'GRAPH_CANVAS_RESET_REQUIRED': {\r\n    return {\r\n      ...state,\r\n      needReset: action.needReset,\r\n    };\r\n  }\r\n  case 'GRAPH_RESET_HIGHLIGHT': {\r\n    return {\r\n      ...state,\r\n      highlightingNode: null,\r\n      secondHighlightingNodeID: null,\r\n      tableExpandNodeID: null,\r\n    };\r\n  }\r\n  case 'GRAPH_CLICK_NODE': {\r\n    if (state.isSearchMode) {\r\n      // clicking node in search mode opens property table\r\n      return {\r\n        ...state,\r\n        highlightingMatchedNodeID: action.nodeID,\r\n        highlightingMatchedNodeOpened: false,\r\n        overlayPropertyHidden: false,\r\n      };\r\n    }\r\n    let newHighlightingNode = null;\r\n    let newSecondHighlightingNodeID = null;\r\n    if (action.nodeID) {\r\n      // if no node is selected, select this node as highlight node\r\n      if (!state.highlightingNode) {\r\n        newHighlightingNode = state.nodes.find(n => n.id === action.nodeID);\r\n      } else if (state.highlightingNode) {\r\n        newHighlightingNode = state.highlightingNode;\r\n\r\n        // if is clicking the same node\r\n        if (state.highlightingNode.id === action.nodeID) {\r\n          // if no second node is selected, regard this as cancel selecting\r\n          if (!state.secondHighlightingNodeID) {\r\n            newHighlightingNode = null;\r\n          }\r\n        } else if (state.secondHighlightingNodeCandidateIDs.length > 1\r\n          && state.secondHighlightingNodeCandidateIDs.includes(action.nodeID)) {\r\n          // regard as canceling selecting second highlight node\r\n          if (state.secondHighlightingNodeID === action.nodeID) {\r\n            newSecondHighlightingNodeID = null;\r\n          } else { // select this as second highlight node\r\n            newSecondHighlightingNodeID = action.nodeID;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const newTableExpandNodeID = newHighlightingNode ? newHighlightingNode.id : null;\r\n    return {\r\n      ...state,\r\n      highlightingNode: newHighlightingNode,\r\n      secondHighlightingNodeID: newSecondHighlightingNodeID,\r\n      tableExpandNodeID: newTableExpandNodeID,\r\n    };\r\n  }\r\n  case 'GRAPH_CLICK_BLANK_SPACE': {\r\n    let newHighlightingNode = state.highlightingNode;\r\n    let newSecondHighlightingNodeID = state.secondHighlightingNodeID;\r\n    let newTableExpandNodeID = state.tableExpandNodeID;\r\n    if (state.highlightingNode) {\r\n      if (state.secondHighlightingNodeID) {\r\n        newSecondHighlightingNodeID = null;\r\n      } else {\r\n        newHighlightingNode = null;\r\n        newTableExpandNodeID = null;\r\n      }\r\n    }\r\n    return {\r\n      ...state,\r\n      highlightingNode: newHighlightingNode,\r\n      secondHighlightingNodeID: newSecondHighlightingNodeID,\r\n      tableExpandNodeID: newTableExpandNodeID,\r\n    };\r\n  }\r\n  case 'TABLE_EXPAND_NODE': {\r\n    let newHighlightingNode = null;\r\n    if (action.nodeID) {\r\n      newHighlightingNode = state.nodes.find(n => n.id === action.nodeID);\r\n    }\r\n    return {\r\n      ...state,\r\n      tableExpandNodeID: action.nodeID,\r\n      highlightingNode: newHighlightingNode,\r\n      secondHighlightingNodeID: null,\r\n    };\r\n  }\r\n  case 'SEARCH_SET_IS_SEARCHING_STATUS': {\r\n    return {\r\n      ...state,\r\n      isSearching: action.isSearching,\r\n    };\r\n  }\r\n  case 'SEARCH_RESULT_UPDATED': {\r\n    return {\r\n      ...state,\r\n      searchResult: action.searchResult,\r\n      matchedNodeIDs: action.searchResultSummary.generalMatchedNodeIDs,\r\n      matchedNodeIDsInNameAndDescription:\r\n        action.searchResultSummary.matchedNodeIDsInNameAndDescription,\r\n      matchedNodeIDsInProperties: action.searchResultSummary.matchedNodeIDsInProperties,\r\n      isGraphView: true,\r\n      isSearchMode: true,\r\n      highlightingMatchedNodeID: null,\r\n      highlightingMatchedNodeOpened: false,\r\n      highlightingNode: null,\r\n      secondHighlightingNodeID: null,\r\n      tableExpandNodeID: null,\r\n    };\r\n  }\r\n  case 'SEARCH_CLEAR_HISTORY': {\r\n    return {\r\n      ...state,\r\n      searchHistoryItems: clearSearchHistoryItems(),\r\n    };\r\n  }\r\n  case 'SEARCH_HISTORY_ITEM_CREATED': {\r\n    return {\r\n      ...state,\r\n      searchHistoryItems: addSearchHistoryItems(action.searchHistoryItem),\r\n    };\r\n  }\r\n  case 'GRAPH_NODES_SVG_ELEMENTS_UPDATED': {\r\n    return {\r\n      ...state,\r\n      graphNodesSVGElements: action.graphNodesSVGElements,\r\n    };\r\n  }\r\n  case 'SEARCH_RESULT_CLEARED': {\r\n    return {\r\n      ...state,\r\n      searchResult: [],\r\n      matchedNodeIDs: [],\r\n      currentSearchKeyword: '',\r\n      isSearchMode: false,\r\n      highlightingMatchedNodeID: null,\r\n      highlightingMatchedNodeOpened: false,\r\n    };\r\n  }\r\n  case 'SEARCH_SAVE_CURRENT_KEYWORD': {\r\n    return {\r\n      ...state,\r\n      currentSearchKeyword: action.keyword,\r\n    };\r\n  }\r\n  case 'GRAPH_MATCHED_NODE_OPENED': {\r\n    return {\r\n      ...state,\r\n      highlightingMatchedNodeOpened: action.opened,\r\n    };\r\n  }\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default ddgraph;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport ddgraph from './DataDictionary/reducers';\r\n\r\nexport const getFileNodes = dictionary => Object.keys(dictionary).filter(node => dictionary[node].category === 'data_file');\r\nexport const getNodeTypes = dictionary => Object.keys(dictionary).filter(node => node.charAt(0) !== '_');\r\n\r\nconst versionInfo = (state = {}, action) => {\r\n    switch (action.type) {\r\n    case 'RECEIVE_VERSION_INFO':\r\n        return { ...state,\r\n        dictionaryVersion: action.data.dictionary.version || 'unknown',\r\n        apiVersion: action.data.version || 'unknown',\r\n        };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nconst excludeSystemProperties = (node) => {\r\n    const properties = node.properties && Object.keys(node.properties)\r\n        .filter(key => (node.systemProperties ? !node.systemProperties.includes(key) : true))\r\n        .reduce((acc, key) => {\r\n        acc[key] = node.properties[key];\r\n        return acc;\r\n        }, {});\r\n    return properties;\r\n};\r\n\r\nconst getDictionaryWithExcludeSystemProperties = (dictionary) => {\r\n    const ret = Object.keys(dictionary)\r\n        .map((nodeID) => {\r\n        const node = dictionary[nodeID];\r\n        if (!node.properties) return node;\r\n        return {\r\n            ...node,\r\n            properties: excludeSystemProperties(node),\r\n        };\r\n        })\r\n        .reduce((acc, node) => {\r\n        acc[node.id] = node;\r\n        return acc;\r\n        }, {});\r\n    return ret;\r\n};\r\n\r\nconst submission = (state = {}, action) => {\r\n  switch (action.type) {\r\n  case 'REQUEST_UPLOAD':\r\n    return { ...state, file: action.file, file_type: action.file_type };\r\n  case 'UPDATE_FILE':\r\n    return { ...state, file: action.file, file_type: action.file_type };\r\n  case 'UPDATE_FORM_SCHEMA':\r\n    return { ...state, formSchema: { ...state.formSchema, ...action.formSchema } };\r\n  case 'RECEIVE_PROJECTS':\r\n    return { ...state,\r\n      projects: action.data.reduce((map, p) => {\r\n        const res = map;\r\n        res[p.code] = p.project_id; return res;\r\n      }, {}),\r\n      projectAvail: action.data.reduce((map, p) => {\r\n        const res = map;\r\n        res[p.project_id] = p.availability_type; return res;\r\n      }, {}),\r\n    };\r\n  case 'RECEIVE_NODE_TYPES':\r\n    return { ...state, nodeTypes: action.data };\r\n  case 'RECEIVE_DICTIONARY':\r\n    return { ...state,\r\n      dictionary: getDictionaryWithExcludeSystemProperties(action.data),\r\n      nodeTypes: getNodeTypes(action.data),\r\n      file_nodes: getFileNodes(action.data),\r\n    };\r\n  case 'RECEIVE_AUTHORIZATION_URL':\r\n    return { ...state, oauth_url: action.url };\r\n  case 'RECEIVE_SUBMISSION_LOGIN':\r\n    return { ...state, login: state.result, error: state.error };\r\n  case 'RECEIVE_SUBMISSION': {\r\n    const prevCounts = ('submit_entity_counts' in state) ? state.submit_entity_counts : {};\r\n    const newCounts = (action.data.entities || [])\r\n      .map(ent => ent.type || 'unknown')\r\n      .reduce((db, type) => {\r\n        const res = db; res[type] = (res[type] || 0) + 1;\r\n        return res;\r\n      }, prevCounts);\r\n    const data = state.submit_result ?\r\n      state.submit_result.concat(action.data.entities || [])\r\n      : action.data.entities;\r\n    const status = state.submit_status ?\r\n      Math.max(state.submit_status, action.submit_status)\r\n      : action.submit_status;\r\n    return { ...state,\r\n      submit_entity_counts: newCounts,\r\n      submit_result: data,\r\n      submit_result_string: state.submit_result_string.concat(JSON.stringify(action.data, null, '    ')).concat('\\n\\n'),\r\n      submit_status: status,\r\n      submit_counter: state.submit_counter + 1,\r\n      submit_total: action.total };\r\n  }\r\n  case 'SUBMIT_SEARCH_FORM':\r\n    return { ...state, search_form: action.data };\r\n  case 'RECEIVE_SEARCH_ENTITIES':\r\n    return { ...state, search_result: action.data, search_status: action.search_status };\r\n  case 'RECEIVE_COUNTS':\r\n    return { ...state,\r\n      counts_search: action.data,\r\n      links_search: Object.entries(action.data)\r\n        .reduce((acc, entry) => { acc[entry[0]] = entry[1].length; return acc; }, {}),\r\n    };\r\n  case 'CLEAR_COUNTS':\r\n    return { ...state, counts_search: null, links_search: null };\r\n  case 'RECEIVE_UNMAPPED_FILES':\r\n    return { ...state, unmappedFiles: action.data };\r\n  case 'RECEIVE_UNMAPPED_FILE_STATISTICS':\r\n    return {\r\n      ...state,\r\n      unmappedFileCount: action.data.count,\r\n      unmappedFileSize: action.data.totalSize,\r\n    };\r\n  case 'RECEIVE_FILES_TO_MAP':\r\n    return { ...state, filesToMap: action.data };\r\n  case 'RESET_SUBMISSION_STATUS':\r\n    return { ...state,\r\n      submit_entity_counts: [],\r\n      submit_result: null,\r\n      submit_result_string: '',\r\n      submit_status: 0,\r\n      submit_counter: 0,\r\n      submit_total: 0,\r\n    };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nconst reducers = combineReducers({ \r\n   submission,\r\n   ddgraph,\r\n   versionInfo\r\n});\r\n\r\nexport default reducers;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux'\r\nimport ReduxDataDictionary from './DataDictionary';\r\nimport reducers from './reducers'\r\nimport $RefParser from \"@apidevtools/json-schema-ref-parser\";\r\nimport jsonData from './schema.json';\r\nimport axios from 'axios';\r\nimport yaml from 'js-yaml';\r\nimport icdcModel from './bento_model_file.yaml';\r\nimport icdcModelProps from './bento_model_properties.yaml'; \r\n//import icdcModel from './icdc-model.yml';\r\n//import icdcModelProps from './icdc-model-props.yml'; \r\nimport mdfSchema from './mdf-schema.yaml';\r\n\r\n\r\n\r\n\r\n\r\nconst version = {\"commit\":\"913161064b02bcef024d072873e77c8c79cc1a68\",\"dictionary\":{\"commit\":\"520a25999fd183f6c5b7ddef2980f3e839517da5\",\"version\":\"0.2.1-9-g520a259\"},\"version\":\"4.0.0-44-g9131610\"};\r\n\r\nconst findObjectWithRef = (obj, updateFn, root_key = '', level = 0) => {\r\n  // iterate over the properties\r\n  for (var propertyName in obj) {\r\n\r\n    if ( level === 0 ) root_key = propertyName;\r\n\r\n    if ( propertyName === '$ref' ) {\r\n      obj['$ref'] = updateFn(obj['$ref'], root_key);\r\n    }\r\n\r\n    // any object that is not a simple value\r\n    if (obj[propertyName] !== null && typeof obj[propertyName] === 'object') {\r\n      // recurse into the object and write back the result to the object graph\r\n      obj[propertyName] = findObjectWithRef(obj[propertyName], updateFn, root_key, (level + 1));\r\n    }\r\n  }\r\n  \r\n  return obj;\r\n};\r\n\r\n// unresolveable:\r\n// {$ref: \"_terms.yaml#/file_format\"}\r\n// {$ref: \"#/UUID\"}\r\n\r\nasync function init() {\r\n  const store = createStore(reducers);\r\n\r\n  let url = 'https://wfy1997.s3.amazonaws.com/schema.json';\r\n\r\n  if ( window.location.hash ) url = window.location.hash.slice(1);\r\n\r\n  const icdcM = await axios(icdcModel);\r\n  const icdcMData = yaml.safeLoad(icdcM.data);\r\n  const icdcMP = await axios(icdcModelProps);\r\n  const icdcMPData = yaml.safeLoad(icdcMP.data);\r\n \r\n\r\n\r\n\r\n  //console.log(icdcMData.Relationships);\r\n  console.log(icdcMData.Nodes);\r\n  console.log(icdcMPData);\r\n  \r\n  //translate the json file here\r\n\r\n  const dataList={};\r\n  for (let [key, value] of Object.entries(icdcMData.Relationships)) {\r\n     // console.log(value);\r\n      \r\n  }\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n  for (let [key, value] of Object.entries(icdcMData.Nodes)) {\r\n    //console.log(key);\r\n    //console.log(value.Category);\r\n    const item = {}\r\n    item[\"$schema\"] = \"http://json-schema.org/draft-06/schema#\";\r\n    item[\"id\"] = key;\r\n    item[\"title\"]=key;\r\n    if(\"Category\" in value){\r\n      item[\"category\"]=value.Category;\r\n  }else{\r\n    item[\"category\"]=\"Undefined\";\r\n    }\r\n     \r\n    \r\n    item[\"program\"]=\"*\";\r\n    item[\"project\"]=\"*\";\r\n    item[\"additionalProperties\"]=false;\r\n    item[\"submittable\"]=true;\r\n    item[\"constraints\"]=null;\r\n    //item[\"links\"]=[];\r\n    \r\n    item[\"type\"]=\"object\";\r\n    const link=[];\r\n    const properties={};\r\n    const pRequired=[];\r\n    \r\n    if (icdcMData.Nodes[key].Props != null ) {\r\n     \r\n      for(var i=0;i<icdcMData.Nodes[key].Props.length;i++){\r\n        //console.log(icdcMData.Nodes[key].Props[i]);\r\n        const nodeP=icdcMData.Nodes[key].Props[i];\r\n        const propertiesItem={};\r\n        for(var propertyName in icdcMPData.PropDefinitions){\r\n          \r\n          if(propertyName==nodeP){\r\n            \r\n            propertiesItem[\"description\"]=icdcMPData.PropDefinitions[propertyName].Desc;\r\n            propertiesItem[\"type\"]=icdcMPData.PropDefinitions[propertyName].Type;\r\n            propertiesItem[\"src\"]=icdcMPData.PropDefinitions[propertyName].Src;\r\n            \r\n            if(icdcMPData.PropDefinitions[propertyName].Req==true){\r\n              pRequired.push(nodeP);\r\n            }\r\n\r\n\r\n          }\r\n        }\r\n        properties[nodeP]=propertiesItem;\r\n\r\n      \r\n      }\r\n\r\n      item[\"properties\"]=properties;\r\n      item[\"required\"]=pRequired;\r\n\r\n    }else{\r\n      item[\"properties\"]={};\r\n    }\r\n    \r\n    \r\n    for (var propertyName in icdcMData.Relationships) {\r\n      const linkItem={};\r\n      //console.log(propertyName);\r\n      //console.log(icdcMData.Relationships[propertyName]);\r\n      //console.log(icdcMData.Relationships[propertyName].Ends);\r\n      const label=propertyName;\r\n      const multiplicity=icdcMData.Relationships[propertyName].Mul;\r\n      const required=false;\r\n      for(var i=0;i<icdcMData.Relationships[propertyName].Ends.length;i++){\r\n        \r\n        if(icdcMData.Relationships[propertyName].Ends[i].Src==key){\r\n          const backref=icdcMData.Relationships[propertyName].Ends[i].Src;\r\n          const name=icdcMData.Relationships[propertyName].Ends[i].Dst;\r\n          const target=icdcMData.Relationships[propertyName].Ends[i].Dst;\r\n\r\n          linkItem[\"name\"]=name;\r\n          linkItem[\"backref\"]=backref;\r\n          linkItem[\"label\"]=label;\r\n          linkItem[\"target_type\"]=target;\r\n          linkItem[\"required\"]=required;\r\n          \r\n          link.push(linkItem);\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n\r\n\r\n    //console.log(link);\r\n    item[\"links\"]=link;\r\n\r\n\r\n    dataList[key]=item;\r\n\r\n    \r\n    \r\n  }\r\n  const term={};\r\n  \r\n\r\n  console.log(dataList);\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  // Fetch S3 schema.json\r\n  //let response = await fetch(url);\r\n  //let schema = await response.json();\r\n  let schema =jsonData;\r\n  //let schema =dataList;\r\n\r\n  // Remove .yaml extension from keys \r\n  let dict = {};  \r\n  for (let [key, value] of Object.entries(schema)) {\r\n    dict[key.slice(0, -5)] = value;\r\n    \r\n  }\r\n  \r\n  /*for (let [key, value] of Object.entries(schema)) {\r\n    dict[key] = value;\r\n    \r\n  }*/\r\n\r\n  \r\n \r\n\r\n  // Recursivly fix references\r\n  dict = findObjectWithRef(dict, (refObj, rootKey)=> { // This halts for sub objects./...\r\n\r\n    if ( refObj.includes('.yaml') ) {\r\n\r\n      // ABS_FIX\r\n      // \"$ref\": \"_definitions.yaml#/ubiquitous_properties\",\r\n      // ->\r\n      // \"$ref\": \"#/_definitions/ubiquitous_properties\",\r\n\r\n      refObj = \"#/\" + refObj.replace('.yaml#', '');\r\n     // console.log(\"ABS FIX -- \" + rootKey + \": \" + refObj);\r\n\r\n    } else {\r\n\r\n      // REL FIX\r\n      // \"$ref\": \"#/state\"\r\n      // ->\r\n      // \"$ref\": \"#/{_definitions aka root key}/state\"\r\n\r\n      refObj = '#/' + rootKey + '/' + refObj.replace('#/', '');\r\n      //console.log(\"REL FIX -- \" + rootKey + \": \" + refObj);\r\n    }\r\n\r\n\r\n    return refObj;\r\n  });\r\n\r\n  // Append metaschema TODO?? Doesn't seem to matter anymore\r\n\r\n  // This is a HACK FIX ME!!@!!!\r\n  \r\n  dict['_terms']['file_format'] = {description: 'wut'};\r\n\r\n\r\n  let newDict = await $RefParser.dereference(dict, {\r\n    continueOnError: false,            // Don't throw on the first error\r\n    dereference: {\r\n      circular: true                 // Don't allow circular $refs\r\n    }\r\n  });\r\n\r\n  //console.log(newDict);\r\n  const newDataList=dataList;\r\n  //newDataList['_terms']=newDict['_terms'];\r\n  //newDataList['_definitions']=newDict['_definitions'];\r\n  //newDataList['_settings']=newDict['_settings'];\r\n  //console.log(newDataList);\r\n  await Promise.all(\r\n    [\r\n      store.dispatch({\r\n        type: 'RECEIVE_DICTIONARY',\r\n        //data: newDict\r\n        data: newDataList\r\n      }),\r\n      store.dispatch({\r\n        type: 'RECEIVE_VERSION_INFO',\r\n        data: version\r\n      })\r\n    ],\r\n  );\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  ReactDOM.render(\r\n    \r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <ReduxDataDictionary />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n  );\r\n}\r\n\r\n\r\ninit();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}